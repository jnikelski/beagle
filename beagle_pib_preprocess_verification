#!/usr/bin/env ruby
# ==============================================================================
# Purpose:
#     Generate verification images, following PiB preprocessing.
#
#     The primary purpose of the verification is to ensure that selected
#     critical structures were withing the field of view of the 
#     scanner.
#
#     For example, since the cerebellar gray is often used as a 
#     reference tissue, we need to know whether any of the cerebellum
#     was not scanned. Appropriate warnings are then issued.
#
# ==============================================================================

require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'
require 'tmpdir'            # needed for Dir::tmpdir

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_logger_classes'

# start of main script
begin
   opt                     = OpenStruct.new{}  # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.fake                = false
   opt.keyname             = ""
   opt.scanDate            = ""
   opt.scanId              = ""                 # this is a derived value
   opt.civetScanDate       = ""
   opt.civetScanId         = ""
   opt.settingsFile        = ""
   
   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [Options]"
      opts.separator ""
      opts.separator "Options:"
   
      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }
   
      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }
   
      opts.on('-f', '--fake', 'Do not actually execute the commands') { |f| opt.fake = f }
   
      opts.on('--keyname subject_keyname', "Anonymizing keyname for this subject") do |keyname|
         opt.keyname = keyname
         puts "** keyname: " + opt.keyname if opt.verbose
      end
   
      opts.on('--scanDate scan_date', "Format YYYYMMDD") do |scanDate|
         opt.scanDate = scanDate
         puts "** scan date: " + opt.scanDate if opt.verbose
      end
      
      opts.on('--civetScanDate scan_date', "Format YYYYMMDD") do |civetScanDate|
         opt.civetScanDate = civetScanDate
         puts "** Civet scan date: " + opt.civetScanDate if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end
   
      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end
   
   end  #OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   opts.parse!(ARGV)



   # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
   #

   # check for aggregated settings file, then read if all looks OK
   if ( opt.settingsFile.empty? ) then
      puts "\n*** Error: Missing option(s) -- Loris aggregated settings file"
      puts opts
      exit
   end
   #
   if ( !File.exists?(opt.settingsFile) || !File.file?(opt.settingsFile) ) then
      puts sprintf("\n!!! Error: The specified Loris aggregated settings [%s] does not exist or is unreadable.", opt.settingsFile)
      exit
   end
   #
   settings = load_beagle_aggregated_settings(opt.settingsFile, verbose=false, debug=false)

   # init associated variables
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']
   CIVET_ROOT_DIR = settings['CIVET_ROOT_DIR']
   CIVET_PREFIX = settings['CIVET_PREFIX'] + '_'
   CIVET_FINAL_T1_VOLUME_SUFFIX = settings['CIVET_FINAL_T1_VOLUME_SUFFIX']
   
   PIB_CEREB_THOLD_PCT = settings['PIB_CEREB_THOLD_PCT'].to_f



   # set some useful values
   opt.scanId = opt.keyname + '-' + opt.scanDate
   opt.civetScanId = opt.keyname + '-' + opt.civetScanDate
   keyname_dir_fullPath = File.join(settings['LORIS_ROOT_DIR'], opt.keyname)
   #
   pib_dir = 'PiB-' + opt.scanDate
   pib_dir_fullPath = File.join(keyname_dir_fullPath, pib_dir)
   pibTmp_dir_fullPath = File.join(pib_dir_fullPath, 'tmp')
   pibLogs_dir_fullPath = File.join(pib_dir_fullPath, 'logs')
   pibNative_dir_fullPath = File.join(pib_dir_fullPath, 'native')
   pibTal_dir_fullPath = File.join(pib_dir_fullPath, 'tal')
   pibTransforms_dir_fullPath = File.join(pib_dir_fullPath, 'transforms')
   pibMasks_dir_fullPath = File.join(pib_dir_fullPath, 'masks')
   pibImages_dir_fullPath = File.join(pib_dir_fullPath, 'images')
   #
   masks_dir = 'MASKS-' + opt.civetScanDate
   masks_dir_fullPath = File.join(keyname_dir_fullPath, masks_dir)
   CEREB_GM_MASK_VOLUME_FULLPATH = File.join(masks_dir_fullPath, 'cerebellum_mask_gm.mnc')



   # * * * * *  START of input argument validation   * * * * *
   #
   # keyname has been entered?
   if ( opt.keyname.empty? or opt.scanDate.empty? ) then
      puts "\n*** Error: Subject keyname OR PiB scan date is missing"
      puts opts
      exit
   end

   # Civet scan date entered?
   if ( opt.civetScanDate.empty? ) then
      puts "\n*** Error: Civet scan date is missing"
      puts opts
      exit
   end

   # check if the temporary working directory exists; if not, create it
   # Note: if often clear out the tmp dir at end of processing by 
   #       deleting it -- that's why we need to re-create it
   if !File.exists?(pibTmp_dir_fullPath) then Dir.mkdir(pibTmp_dir_fullPath) end
   #
   # * * * * *  END of input argument validation   * * * * * * * *
   # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 



   # load subject's master logfile; write a start message
   progname = 'beagle_pib_preprocess_verification'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'PiB', opt.scanDate)
   logger.log_message(progname, opt.keyname, 'PiB', opt.scanDate, 'civet_version', CIVET_VERSION)

   # now that we've verified that we have a /logs subdir,
   # ... set processing status to "running"
   set_job_status(pibLogs_dir_fullPath, "beagle_pib_preprocess_verification_JobStatus", "running")

 

   # Verify the Cerebellar mask
   #
   #
   # get the total number of voxels comprising the cerebellar GM mask
   cmd = "mincstats #{CEREB_GM_MASK_VOLUME_FULLPATH}"
   puts "\n** Executing command: #{cmd} " if opt.verbose
   cmdResult = `#{cmd}`
   # get the sum of all mask voxels
   # ... split by EOL
   cmdResult = cmdResult.split
   # ... find the "Sum:" label, as the next index will be the Sum itself
   sumIndex = cmdResult.rindex("Sum:")
   gmMaskCount = cmdResult[sumIndex +1].to_i
   puts "\n** I see #{gmMaskCount} cerebellar voxels in the gray matter mask" 
   logger.log_message(progname, opt.keyname, 'PiB', opt.scanDate, 'nVox_in_cerebGMmask', gmMaskCount)
   
   
   # get the total number of voxels comprising the adjusted cerebellar GM mask
   adjusted_cereb_gm_mask_volname = opt.keyname + "_cerebGMmask_maskedBy_meanPibActivity.mnc"
   adjusted_cereb_gm_mask_volname_fullPath = File.join(pibMasks_dir_fullPath, adjusted_cereb_gm_mask_volname)
   #
   cmd = "mincstats #{adjusted_cereb_gm_mask_volname_fullPath}"
   puts "\n** Executing command: #{cmd} " if opt.verbose
   cmdResult = `#{cmd}`
   # get the sum of all mask voxels
   # ... split by EOL
   cmdResult = cmdResult.split
   # ... find the "Sum:" label, as the next index will be the Sum itself
   sumIndex = cmdResult.rindex("Sum:")
   dynamicCount = cmdResult[sumIndex +1].to_i
   puts "\n** I see #{dynamicCount} non-zero intensity cerebellar voxels in the masked mean dynamic volume" 
   logger.log_message(progname, opt.keyname, 'PiB', opt.scanDate, 'nVox_in_adjustedCerebGMmask', dynamicCount)

   # if the voxel counts are not the same, then we have a problem
   # ... set error status and terminate
   #
   # OK, I've just played around a bit and noticed that the inferior-most cerebellar lobes are
   # often missing.  So I have a new solution: Let's permit a loss of up to 10 percent of the 
   # cerebellar voxels -- but let's make sure that we use the ADJUSTED CEREBELLAR MASK when
   # computing the cerebellar average. OK?
   #
   # ... error if too different
   pctInScanner = (dynamicCount.to_f / gmMaskCount.to_f) * 100.0
   logger.log_message(progname, opt.keyname, 'PiB', opt.scanDate, 'percent_included_voxels', pctInScanner)
                                       
   if ( pctInScanner < PIB_CEREB_THOLD_PCT ) then
      set_job_status(pibLogs_dir_fullPath, "beagle_pib_preprocess_verification_Warning", "error")
      puts sprintf("\n!!!Cerebellar gray matter not entirely in scanner field of view. I can only see %3.2f percent.", pctInScanner)
      puts("\n!!!This should be fixed.")
      #abort("\n!!!Die\n\n")
      #
   elsif ( pctInScanner < 100.0 and pctInScanner >= PIB_CEREB_THOLD_PCT ) then
   # ... warning if somewhat different ( > 90 percent)
      puts sprintf("\n???Cerebellar gray matter not entirely in scanner field of view. I can only see %3.2f percent.", pctInScanner)
      set_job_status(pibLogs_dir_fullPath, "beagle_pib_preprocess_verification_Warning", "warning")
   end
  
  
  
   # Next, create verification images:
   # ... first intensity normalize the stereotactic mean image
   #     normalize to 95 so that that visualization has fewer blown out pixels
   # ... so that we can use meaningful threshold values
   #
   puts "\n** Image intensity normalization of verification image ..."   if opt.verbose
   cmd = "inormalize -clobber -verbose   "
   cmd << "-const2 0.0 95.0  -range 5.0  "
   cmd << "#{pibTal_dir_fullPath}/#{opt.keyname}_mean_talAligned.mnc  "
   cmd << "#{pibTmp_dir_fullPath}/#{opt.keyname}_mean_talAligned_normalized.mnc    "
   do_cmd(cmd, opt.verbose, opt.fake)


   # generate the images
   visualization_dir = File.join(keyname_dir_fullPath, 'visualization')
   anatomical_underlay_volume = CIVET_PREFIX + opt.civetScanId + CIVET_FINAL_T1_VOLUME_SUFFIX
   #
   puts "\n** Create verification image ..."   if opt.verbose
   cmd = "mincthumbs -v   "
   cmd << "-tthresh   30  "
   cmd << "-opacity .6  "
   cmd << "-tceiling  100  "
   cmd << "-contrast 1 "
   cmd << "-pos  "
   cmd << "-out #{pibImages_dir_fullPath}/#{opt.keyname}_mean_talAligned.pdf    "
   cmd << "#{pibTmp_dir_fullPath}/#{opt.keyname}_mean_talAligned_normalized.mnc   "
   cmd << "#{visualization_dir}/#{anatomical_underlay_volume} "
   do_cmd(cmd, opt.verbose, opt.fake)
   #
   # clean up the tmp dir
   #FileUtils.rm Dir.glob("#{pibDir_tmp}/*")


   # set processing status to "finished"
   set_job_status(pibLogs_dir_fullPath, "beagle_pib_preprocess_verification_JobStatus", "finished")

   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'PiB', opt.scanDate)
   logger.save_to_file()

rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  #main()


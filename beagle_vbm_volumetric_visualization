#!/usr/bin/env ruby
# ==============================================================================
# PURPOSE:
#    This script is supposed to be executed by it's driver, to produce
#      volumetric visualization of VBM z-scores.
#
# ==============================================================================

require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'
require 'tmpdir'            # needed for Dir::tmpdir

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_logger_classes'

# start of main script
begin
   opt                     = OpenStruct.new{}  # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.fake                = false
   #
   opt.keyname             = ""
   opt.scanDate            = ""
   opt.scanId              = ""
   opt.settingsFile        = ""
   opt.t1UnderlayVol       = ""

   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [Options]   gray_matter_zScores_in.mnc   white_matter_zScores_in.mnc"
      opts.separator ""
      opts.separator "Options:"

      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }

      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }

      opts.on('-f', '--fake', 'Do not actually execute the commands') { |f| opt.fake = f }

      opts.on('--keyname subject_keyname', "subject keyname (e.g., trinity)") do |keyname|
         opt.keyname = keyname.to_s
         puts "** subject keyname: " + opt.keyname if opt.verbose
      end

      opts.on('--scanDate scan_date', "Format YYYYMMDD") do |scanDate|
         opt.scanDate = scanDate
         puts "** scan date: " + opt.scanDate if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end

      opts.on('--t1UnderlayVol t1_underlay_vol', "structural underlay volume") do |t1UnderlayVol|
         opt.t1UnderlayVol = t1UnderlayVol
         puts "** structural underlay volume (fullpath): " + opt.t1UnderlayVol if opt.verbose
      end
      
      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end

   end  #OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   begin
      opts.parse!(ARGV)
   rescue Exception => e
      puts e, "", opts
      exit
   end



   # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
   #

   # check for aggregated settings file, then read if all looks OK
   if ( opt.settingsFile.empty? ) then
      puts "\n*** Error: Missing option(s) -- Loris aggregated settings file"
      puts opts
      exit
   end
   #
   if ( !File.exists?(opt.settingsFile) || !File.file?(opt.settingsFile) ) then
      puts sprintf("\n!!! Error: The specified Loris aggregated settings [%s] does not exist or is unreadable.", opt.settingsFile)
      exit
   end
   #
   settings = load_beagle_aggregated_settings(opt.settingsFile, verbose=false, debug=false)


   # init selected variables
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']
   CIVET_ROOT_DIR = settings['CIVET_ROOT_DIR']
   CIVET_PREFIX = settings['CIVET_PREFIX'] + '_'

   # set volumetric visualization thresholds
   VBM_VOLUMETRIC_VIZ_FLOOR = settings['VBM_VOLUMETRIC_VIZ_FLOOR']
   VBM_VOLUMETRIC_VIZ_CEILING = settings['VBM_VOLUMETRIC_VIZ_CEILING']
   puts "Volumetric visualization min/max: #{VBM_VOLUMETRIC_VIZ_FLOOR}/#{VBM_VOLUMETRIC_VIZ_CEILING}" if opt.debug


   # set some useful values/directories
   opt.scanId = opt.keyname + '-' + opt.scanDate
   keyname_dir_fullPath = File.join(settings['LORIS_ROOT_DIR'], opt.keyname)
   
   vbm_dir = 'VBM-' + opt.scanDate
   vbm_dir_fullPath = File.join(keyname_dir_fullPath, vbm_dir)
   vbmLogs_dir_fullPath = File.join(vbm_dir_fullPath, 'logs')



   # * * * * *   Start of input argument validation   * * * * *

   # make sure that the input args were specified and are valid
   gm_zScore_volume_fullPath = ARGV[0]
   puts "Input gray matter z-score volume: #{gm_zScore_volume_fullPath}" if opt.debug
   #
   wm_zScore_volume_fullPath = ARGV[1]
   puts "Input white matter z-score volume: #{wm_zScore_volume_fullPath}" if opt.debug

   if ( gm_zScore_volume_fullPath.nil? or wm_zScore_volume_fullPath.nil? ) then
      puts "\n*** Error: Please specify both gray and white matter z-score volumes"
      puts opts
      exit
   end
   # ... exists ??
   if ( !File.exists?(gm_zScore_volume_fullPath) or !File.exists?(wm_zScore_volume_fullPath) ) then
      puts sprintf("\n*** Error: One or both of the z-score volumes  does not exist.")
      puts opts
      exit
   end

   # keyname has been entered?
   if ( opt.keyname.empty? ) then
      puts "\n*** Error: Subject keyname is missing ... try, try, again"
      puts opts
      exit
   end

   # scan date entered?
   if ( opt.scanDate.empty? ) then
      puts "\n*** Error: Civet scan date is missing ... we really need that."
      puts opts
      exit
   end

   # anatomical underlay volume has been entered?
   if ( opt.t1UnderlayVol.empty? ) then
      puts "\n*** Error: Anatomical underlay volume not specified ... we really need that."
      puts opts
      exit
   end
   # ... and does it really exist??
   if ( !File.exists?(opt.t1UnderlayVol) ) then
      puts sprintf("\n*** Error: Specified anatomical underlay volume [%s] does not exist ... we really need that.", opt.t1UnderlayVol)
      puts opts
      exit
   end

   # * * * * *   End of input argument validation   * * * * *



   # load subject's master logfile; write a start message
   progname = 'beagle_vbm_volumetric_visualization'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'VBM', opt.scanDate)
   logger.log_message(progname, opt.keyname, 'VBM', opt.scanDate, 'civet_version', CIVET_VERSION)

   # set job status to "running"
   set_job_status(vbmLogs_dir_fullPath, "beagle_vbm_volumetric_visualization_JobStatus", "running")

   #
   # build mincthumbs commandline and execute

   # convert upper threshhold to an absolute value
   # ... Note string -> int --> abs() --> string
   viz_upperT = VBM_VOLUMETRIC_VIZ_CEILING.to_i.abs.to_s

   # start with the GRAY MATTER
   #
   # output pdf name is like the input z-score volume, with a .pdf suffix
   vizOut_dir = File.dirname(gm_zScore_volume_fullPath)
   vizOut_dir = File.join(vizOut_dir, 'images')
   extName = File.extname(gm_zScore_volume_fullPath)
   filename_root = File.basename(gm_zScore_volume_fullPath, extName)
   #
   pdf_vizOut_filename = filename_root + '.pdf'
   pdf_vizOut_fullPath = File.join(vizOut_dir, pdf_vizOut_filename)
   #
   jpg_vizOut_filename = filename_root + '_%d' + '.jpg'
   jpg_vizOut_fullPath = File.join(vizOut_dir, jpg_vizOut_filename)
   #
   #
   # forge the command
   cmd = "mincthumbs   -v  "
   cmd << "-tthresh #{VBM_VOLUMETRIC_VIZ_FLOOR} "  # visualization threshold - low cutoff
   cmd << "-tceiling #{viz_upperT}  "           # maximum absolute value in the color coding
   cmd << "-contrast 1  "                       # anatomical contrast (also affects brightness)
   cmd << "-neg  "                              # only show positive values
   cmd << "-dpi 300  "                          # resolution
   cmd << "-out #{pdf_vizOut_fullPath}  "       # output filename
   cmd << "#{gm_zScore_volume_fullPath}  "      # ratio volume
   cmd << "#{opt.t1UnderlayVol}  "              # anatomical underlay
   do_cmd(cmd, opt.verbose, opt.fake)

   # split the pdf into separate jpg's for use in the auto-report doc
   cmd = "convert "
   cmd << "-density 600 "                       # hi-res
   cmd << "#{pdf_vizOut_fullPath}  "            # input pdf filename
   cmd << "-scale 2000x2000  "                  #
   cmd << "#{jpg_vizOut_fullPath}  "            # output
   do_cmd(cmd, opt.verbose, opt.fake)

   # now do the same for WHITE MATTER
   vizOut_dir = File.dirname(wm_zScore_volume_fullPath)
   vizOut_dir = File.join(vizOut_dir, 'images')
   extName = File.extname(wm_zScore_volume_fullPath)
   filename_root = File.basename(wm_zScore_volume_fullPath, extName)
   #
   pdf_vizOut_filename = filename_root + '.pdf'
   pdf_vizOut_fullPath = File.join(vizOut_dir, pdf_vizOut_filename)
   #
   jpg_vizOut_filename = filename_root + '_%d' + '.jpg'
   jpg_vizOut_fullPath = File.join(vizOut_dir, jpg_vizOut_filename)
   #
   #
   # forge the command
   cmd = "mincthumbs   -v  "
   cmd << "-tthresh #{VBM_VOLUMETRIC_VIZ_FLOOR} "  #
   cmd << "-tceiling #{viz_upperT}  "           #
   cmd << "-contrast 1  "                       #
   cmd << "-neg  "                              #
   cmd << "-dpi 300  "                          #
   cmd << "-out #{pdf_vizOut_fullPath}  "       #
   cmd << "#{wm_zScore_volume_fullPath}  "      #
   cmd << "#{opt.t1UnderlayVol}  "              #
   do_cmd(cmd, opt.verbose, opt.fake)

   # split the pdf into separate jpg's for use in the auto-report doc
   cmd = "convert "
   cmd << "-density 600 "                       # hi-res
   cmd << "#{pdf_vizOut_fullPath}  "            # output filename
   cmd << "-scale 2000x2000  "                  #
   cmd << "#{jpg_vizOut_fullPath}  "            # output
   do_cmd(cmd, opt.verbose, opt.fake)

   # set job status to "finished"
   set_job_status(vbmLogs_dir_fullPath, "beagle_vbm_volumetric_visualization_JobStatus", "finished")

   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'VBM', opt.scanDate)
   logger.save_to_file()

rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  #main()


#!/usr/bin/env ruby
# ==============================================================================
# PURPOSE:
#    This script is supposed to be executed by it's driver, to produce
#      surface visualization of PiB ratios.
#
# ==============================================================================

require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'
require 'tmpdir'            # needed for Dir::tmpdir

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_logger_classes'

# start of main script
begin
   opt                     = OpenStruct.new{}  # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.fake                = false
   #
   opt.keyname             = ""
   opt.scanDate            = ""
   opt.civetScanDate       = ""
   opt.settingsFile        = ""
   #
   opt.avgLhSurface        = ""                 # average LH surface file
   opt.avgRhSurface        = ""                 # average RH surface file
   opt.indivLhSurface      = ""                 # subject-specific LH surface file
   opt.indivRhSurface      = ""                 # subject-specific RH surface file
   opt.colorMap            = "hot"              # MNI colormap to use

   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [Options]"
      opts.separator ""
      opts.separator "Options:"

      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }

      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }

      opts.on('-f', '--fake', 'Do not actually execute the commands') { |f| opt.fake = f }

      opts.on('--keyname subject_keyname', "subject keyname (e.g., trinity)") do |keyname|
         opt.keyname = keyname.to_s
         puts "** subject keyname: " + opt.keyname if opt.verbose
      end
         
      opts.on('--scanDate pib_scan_date', "Usually a scan date of format YYYYMMDD") do |scanDate|
         opt.scanDate = scanDate
         puts "** PiB scan date: " + opt.scanDate if opt.verbose
      end

      opts.on('--civetScanDate civet_scan_date', "Usually a scan date of format YYYYMMDD") do |civetScanDate|
         opt.civetScanDate = civetScanDate
         puts "** Civet scan date: " + opt.civetScanDate if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end

      opts.on('--colorMap color_map', "color map to use in display (default is '#{opt.colorMap}')") do |cMap|
         opt.colorMap = cMap.to_s
         puts "** color map: " + opt.colorMap if opt.verbose
      end

      opts.on('--avgLhSurface avg_LH_surface', "average LH surface") do |avgLhSurface|
         opt.avgLhSurface = avgLhSurface
         puts "** average LH surface (fullpath to .obj file): " + opt.avgLhSurface if opt.verbose
      end

      opts.on('--avgRhSurface avg_RH_surface', "average RH surface") do |avgRhSurface|
         opt.avgRhSurface = avgRhSurface
         puts "** average RH surface (fullpath to .obj file): " + opt.avgRhSurface if opt.verbose
      end

      opts.on('--indivLhSurface individual_LH_surface', "individual LH surface") do |indivLhSurface|
         opt.indivLhSurface = indivLhSurface
         puts "** individual LH surface (fullpath to .obj file): " + opt.indivLhSurface if opt.verbose
      end

      opts.on('--indivRhSurface individual_RH_surface', "individual RH surface") do |indivRhSurface|
         opt.indivRhSurface = indivRhSurface
         puts "** individual RH surface (fullpath to .obj file): " + opt.indivRhSurface if opt.verbose
      end

      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end

   end  #OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   opts.parse!(ARGV)



  # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
  #

   # check for aggregated settings file, then read if all looks OK
   if ( opt.settingsFile.empty? ) then
      puts "\n*** Error: Missing option(s) -- Loris aggregated settings file"
      puts opts
      exit
   end
   #
   if ( !File.exists?(opt.settingsFile) || !File.file?(opt.settingsFile) ) then
      puts sprintf("\n!!! Error: The specified Loris aggregated settings [%s] does not exist or is unreadable.", opt.settingsFile)
      exit
   end
   #
   settings = load_beagle_aggregated_settings(opt.settingsFile, verbose=false, debug=false)

   # init associated variables
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']


   # set volumetric visualization thresholds
   PIB_SURFACE_VIZ_FLOOR = settings['PIB_SURFACE_VIZ_FLOOR'].split(',')
   PIB_SURFACE_VIZ_CEILING = settings['PIB_SURFACE_VIZ_CEILING'].split(',')
   puts "Surface visualization min/max: #{PIB_SURFACE_VIZ_FLOOR}/#{PIB_SURFACE_VIZ_CEILING}" if opt.debug

   # set some useful values/paths
   keyname_dir_fullPath = File.join(settings['LORIS_ROOT_DIR'], opt.keyname)
   pib_dir = 'PiB-' + opt.scanDate
   pib_dir_fullPath = File.join(keyname_dir_fullPath, pib_dir)
   pibRatios_dir_fullPath = File.join(pib_dir_fullPath, 'ratios')
   pibTmp_dir_fullPath = File.join(pib_dir_fullPath, 'tmp')
   pibLogs_dir_fullPath = File.join(pib_dir_fullPath, 'logs')
   pibImages_dir_fullPath = File.join(pib_dir_fullPath, 'images')


   # set reference tissue-related values. First, parse the multi-entry input lines into character arrays
   PIB_REF_TISSUE_IDENTIFIERS = settings['PIB_REF_TISSUE_IDENTIFIERS'].split(',')
   PIB_REF_TISSUE_DESCRIPTIONS = settings['PIB_REF_TISSUE_DESCRIPTIONS'].split(',')
   #
   # create vector of input ratio volume names
   ratio_volumes_fullpath = []
   ratio_volumes_fullpath.push(File.join(pibRatios_dir_fullPath, opt.keyname + "_pibRatios_" + PIB_REF_TISSUE_IDENTIFIERS[0] + "_noMask.mnc"))
   ratio_volumes_fullpath.push(File.join(pibRatios_dir_fullPath, opt.keyname + "_pibRatios_" + PIB_REF_TISSUE_IDENTIFIERS[1] + "_noMask.mnc"))
   puts ratio_volumes_fullpath if opt.debug



   # * * * * *  START of input argument validation   * * * * *
   #
   # keyname has been entered?
   if ( opt.keyname.empty? or opt.scanDate.empty? ) then
      puts "\n*** Error: Subject keyname OR PiB scan date is missing"
      puts opts
      exit
   end

   # Civet scan date entered?
   if ( opt.civetScanDate.empty? ) then
      puts "\n*** Error: Civet scan date is missing"
      puts opts
      exit
   end
  
   # both averaged surface objects entered?
   if ( opt.avgLhSurface.empty? or opt.avgRhSurface.empty? ) then
      puts "\n*** Error: One or both of the averaged surface objects have not been entered."
      puts opts
      exit
   end

   # both subject-specific surface objects entered?
   if ( opt.indivLhSurface.empty? or opt.indivRhSurface.empty? ) then
      puts "\n*** Error: One or both of the subject-specific surface objects have not been entered."
      puts opts
      exit
   end

   # ratio volume exists for each reference tissue type?
   ratio_volumes_fullpath.each{ |ratioVolume_fullPath|
      if ( !File.exist?(ratioVolume_fullPath) || !File.file?(ratioVolume_fullPath) ) then
         puts sprintf("!!! Error: PiB ratio volume not found for for %s-%s", opt.keyname, opt.scanDate)
         puts sprintf("!!!        Expected filename: %s", ratioVolume_fullPath)
         puts opts
         exit
      end
   }

   # check if the temporary working directory exists; if not, create it
   # Note: if often clear out the tmp dir at end of processing by 
   #       deleting it -- that's why we need to re-create it
   if !File.exists?(pibTmp_dir_fullPath) then Dir.mkdir(pibTmp_dir_fullPath) end
   #
   # * * * * *  END of input argument validation   * * * * * * * *
   # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


   # load subject's master logfile; write a start message
   progname = 'beagle_pib_surface_visualization'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'PiB', opt.scanDate)
   logger.log_message(progname, opt.keyname, 'PiB', opt.scanDate, 'civet_version', CIVET_VERSION)

   # now that we've verified that we have a /logs subdir,
   # ... set processing status to "running"
   set_job_status(pibLogs_dir_fullPath, "beagle_pib_surface_visualization_JobStatus", "running")



   #
   # create the various left and right hemisphere surface image components
   # ... LOOPING over all ratio volumes
   #
   ratio_volumes_fullpath.each_index{ |ratioVolume_ndx|

      # Render onto AVERAGE surface first
      #
      # define and create the tmp output directorys
      wrkDir = pibTmp_dir_fullPath
      lh_images_dir = File.join(wrkDir, 'lh_images_avgSurf')
      FileUtils.mkdir_p(lh_images_dir)
      rh_images_dir = File.join(wrkDir, 'rh_images_avgSurf')
      FileUtils.mkdir_p(rh_images_dir)


      # create LH surface components
      cmd = "hclab_make_surface_images   -v "
      cmd << "--valueRange=#{PIB_SURFACE_VIZ_FLOOR[ratioVolume_ndx]},#{PIB_SURFACE_VIZ_CEILING[ratioVolume_ndx]}  "   # visualization threshold - low cutoff
      cmd << "--colorMap=#{opt.colorMap}  "                       # maximum absolute value in the color coding
      cmd << "#{ratio_volumes_fullpath[ratioVolume_ndx]}  "       # ratio volume
      cmd << "#{opt.avgLhSurface}  "                              # surface to render upon
      cmd << "#{lh_images_dir}"
      do_cmd(cmd, opt.verbose, opt.fake)

      # create RH surface components
      cmd = "hclab_make_surface_images   -v "
      cmd << "--valueRange=#{PIB_SURFACE_VIZ_FLOOR[ratioVolume_ndx]},#{PIB_SURFACE_VIZ_CEILING[ratioVolume_ndx]}  "   # visualization threshold - low cutoff
      cmd << "--colorMap=#{opt.colorMap}  "                       # maximum absolute value in the color coding
      cmd << "#{ratio_volumes_fullpath[ratioVolume_ndx]}  "       # ratio volume
      cmd << "#{opt.avgRhSurface}  "                              # surface to render upon
      cmd << "#{rh_images_dir}"
      do_cmd(cmd, opt.verbose, opt.fake)

      # create the summary image
      vizOut = opt.keyname + "_pibRatios_" + PIB_REF_TISSUE_IDENTIFIERS[ratioVolume_ndx] + "_averageSurfaceViz.png"
      vizOut_fullPath = File.join(pibImages_dir_fullPath, vizOut)
      cmd = "hclab_make_summary_image -v    "
      cmd << "#{lh_images_dir}  "
      cmd << "#{rh_images_dir}  "
      cmd << "#{vizOut_fullPath}"
      do_cmd(cmd, opt.verbose, opt.fake)

      # clean up the temp directories
      FileUtils.remove_dir(lh_images_dir)
      FileUtils.remove_dir(rh_images_dir)

      # Render onto INDIVIDUAL surface
      #
      # define and create the tmp output directorys
      wrkDir = pibTmp_dir_fullPath
      lh_images_dir = File.join(wrkDir, 'lh_images_indivSurf')
      FileUtils.mkdir_p(lh_images_dir)
      rh_images_dir = File.join(wrkDir, 'rh_images_indivSurf')
      FileUtils.mkdir_p(rh_images_dir)

      # create LH surface components
      cmd = "hclab_make_surface_images   -v  "
      cmd << "--valueRange=#{PIB_SURFACE_VIZ_FLOOR[ratioVolume_ndx]},#{PIB_SURFACE_VIZ_CEILING[ratioVolume_ndx]}  "   # visualization threshold - low cutoff
      cmd << "--colorMap=#{opt.colorMap}  "                       # maximum absolute value in the color coding
      cmd << "#{ratio_volumes_fullpath[ratioVolume_ndx]}  "       # ratio volume
      cmd << "#{opt.indivLhSurface}  "                            # surface to render upon
      cmd << "#{lh_images_dir}"
      do_cmd(cmd, opt.verbose, opt.fake)

      # create RH surface components
      cmd = "hclab_make_surface_images   -v  "
      cmd << "--valueRange=#{PIB_SURFACE_VIZ_FLOOR[ratioVolume_ndx]},#{PIB_SURFACE_VIZ_CEILING[ratioVolume_ndx]}  "   # visualization threshold - low cutoff
      cmd << "--colorMap=#{opt.colorMap}  "                       # maximum absolute value in the color coding
      cmd << "#{ratio_volumes_fullpath[ratioVolume_ndx]}  "       # ratio volume
      cmd << "#{opt.indivRhSurface}  "                            # surface to render upon
      cmd << "#{rh_images_dir}"
      do_cmd(cmd, opt.verbose, opt.fake)

      # create the summary image
      vizOut = opt.keyname + "_pibRatios_" + PIB_REF_TISSUE_IDENTIFIERS[ratioVolume_ndx] + "_individualSurfaceViz.png"
      vizOut_fullPath = File.join(pibImages_dir_fullPath, vizOut)
      cmd = "hclab_make_summary_image -v    "
      cmd << "#{lh_images_dir}  "
      cmd << "#{rh_images_dir}  "
      cmd << "#{vizOut_fullPath}"
      do_cmd(cmd, opt.verbose, opt.fake)

      # clean up the temp directories
      FileUtils.remove_dir(lh_images_dir)
      FileUtils.remove_dir(rh_images_dir)
   }


   # set job status to "finished"
   set_job_status(pibLogs_dir_fullPath, "beagle_pib_surface_visualization_JobStatus", "finished")

   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'PiB', opt.scanDate)
   logger.save_to_file()


rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  #main()


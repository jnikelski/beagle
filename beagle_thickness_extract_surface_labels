#!/usr/bin/env ruby
# ==============================================================================
# PURPOSE:
#    This script is supposed to be executed by it's driver, to extract
#    AAL label values at each vertex to a vector file.
# ==============================================================================

require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_logger_classes'



# start of main script
begin
   opt                     = OpenStruct.new{}  # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.fake                = false
   #
   opt.keyname             = ""                 # subject keyname
   opt.civetScanDate       = ""
   opt.settingsFile        = ""
   #
   opt.surfaceLh                 = ""           # individual LH surface - fullpath
   opt.surfaceRh                 = ""           # individual LH surface - fullpath
   opt.aalLblVolume              = ""           # individual AAL labelled volume


   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [Options]"
      opts.separator ""
      opts.separator "Options:"

      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }

      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }

      opts.on('-f', '--fake', 'Do not actually execute the commands') { |f| opt.fake = f }

      opts.on('--keyname subject_keyname', "subject keyname (e.g., trinity)") do |keyname|
         opt.keyname = keyname.to_s
         puts "** subject keyname: " + opt.keyname if opt.verbose
      end

      opts.on('--civetScanDate civet_scan_date', "Format YYYYMMDD") do |civetScanDate|
         opt.civetScanDate = civetScanDate
         puts "** Civet scan date: " + opt.civetScanDate if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end

      opts.on('--surfaceLh lh_surface', "Subjects LH surface object (fullpath)") do |surfaceLh|
         opt.surfaceLh = surfaceLh
         puts "** Subjects LH surface file: " + opt.surfaceLh if opt.verbose
      end
      
      opts.on('--surfaceRh rh_surface', "Subjects RH surface object (fullpath)") do |surfaceRh|
         opt.surfaceRh = surfaceRh
         puts "** Subjects RH surface file: " + opt.surfaceRh if opt.verbose
      end
     
      opts.on('--aalLblVolume aal_labelled_volume', "Subjects AAL labelled volume (fullpath)") do |aalLblVolume|
         opt.aalLblVolume = aalLblVolume
         puts "** Subjects AAL labelled volume (fullpath): " + opt.aalLblVolume if opt.verbose
      end

      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end

   end  #OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   opts.parse!(ARGV)


   # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
   #

   # check for aggregated settings file, then read if all looks OK
   if ( opt.settingsFile.empty? ) then
      puts "\n*** Error: Missing option(s) -- Loris aggregated settings file"
      puts opts
      exit
   end
   #
   if ( !File.exists?(opt.settingsFile) || !File.file?(opt.settingsFile) ) then
      puts sprintf("\n!!! Error: The specified Loris aggregated settings [%s] does not exist or is unreadable.", opt.settingsFile)
      exit
   end
   #
   settings = load_beagle_aggregated_settings(opt.settingsFile, verbose=false, debug=false)


   # init selected variables
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']

   # set some useful values/directories
   keyname_dir_fullPath = File.join(settings['LORIS_ROOT_DIR'], opt.keyname)
   cta_dir = 'thickness-' + opt.civetScanDate
   cta_dir_fullPath = File.join(keyname_dir_fullPath, cta_dir)
   ctaLogs_dir_fullPath = File.join(cta_dir_fullPath, 'logs')
   ctaTmp_dir_fullPath = File.join(cta_dir_fullPath, "tmp")


   # * * * * *   Start of input argument validation   * * * * *

   # keyname has been entered?
   if ( opt.keyname.empty? or opt.civetScanDate.empty? ) then
      puts "\n*** Error: Subject keyname or civet scan date is missing (or both)"
      puts opts
      exit
   end

   # ... now check the thickness directory 
   if ( !File.exists?(cta_dir_fullPath) || !File.directory?(cta_dir_fullPath) ) then
      puts sprintf("\n*** Error: The cortical thickness output root directory [%s] is not valid", cta_dir_fullPath)
      puts opts
      exit
   end

   # * * * * *   End of input argument validation   * * * * *


   # load subject's master logfile; write a start message
   progname = 'beagle_thickness_extract_surface_labels'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'THICKNESS', opt.civetScanDate)
   logger.log_message(progname, opt.keyname, 'THICKNESS', opt.civetScanDate, 'civet_version', CIVET_VERSION)

   # set job status to "running"
   set_job_status(ctaLogs_dir_fullPath, "beagle_thickness_extract_surface_labels_JobStatus", "running")



   # extract label values at each vertex 
   # ... using volume_object_evaluate from the conglomerate package
   # ... do LH first
   lh_extracted_labels_filename = opt.keyname + "_lh_extracted_labels.txt"
   lh_extracted_labels_filename_fullpath = File.join(ctaTmp_dir_fullPath, lh_extracted_labels_filename)
   cmd = "volume_object_evaluate  -nearest_neighbour  "
   cmd << "#{opt.aalLblVolume}    "
   cmd << "#{opt.surfaceLh}  "
   cmd << "#{lh_extracted_labels_filename_fullpath}  "
   do_cmd(cmd, opt.verbose, opt.fake)

   # ... now the RH
   rh_extracted_labels_filename = opt.keyname + "_rh_extracted_labels.txt"
   rh_extracted_labels_filename_fullpath = File.join(ctaTmp_dir_fullPath, rh_extracted_labels_filename)
   cmd = "volume_object_evaluate  -nearest_neighbour  "
   cmd << "#{opt.aalLblVolume}    "
   cmd << "#{opt.surfaceRh}  "
   cmd << "#{rh_extracted_labels_filename_fullpath}  "
   do_cmd(cmd, opt.verbose, opt.fake)

   # concatenate Lh and Rh files together
   extracted_labels_filename = opt.keyname + "_extracted_aal_surface_labels.txt"
   extracted_labels_filename_fullpath = File.join(cta_dir_fullPath, extracted_labels_filename)
   cmd = "cat  "
   cmd << "#{lh_extracted_labels_filename_fullpath}  "
   cmd << "#{rh_extracted_labels_filename_fullpath}  "
   cmd << "> #{extracted_labels_filename_fullpath}"
   do_cmd(cmd, opt.verbose, opt.fake)


   # set job status to done
   set_job_status(ctaLogs_dir_fullPath, "beagle_thickness_extract_surface_labels_JobStatus", "finished")

   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'THICKNESS', opt.civetScanDate)
   logger.save_to_file()

rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  #main()


#!/usr/bin/env ruby
# ==============================================================================
# Purpose:
#     Two words -- volumetric visualization.  Want more words? OK.
#     Using the FDG ratio 3D volumes and the mincthumbs scripts that we
#     obtained from the Zatorre lab (Nick, via Patrick), overlay thresholded
#     (< 0.8) FDG ratios on to each subject's normalized anatomy, then
#     display at all 3 orthogonal slice orientations.
#
# ==============================================================================

require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'
require 'tmpdir'            # needed for Dir::tmpdir

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_logger_classes'

# start of main script
begin
   opt                     = OpenStruct.new{}  # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.fake                = false
   #
   opt.keyname             = ""                 # subject keyname
   opt.scanId              = ""
   opt.civetScanId         = ""
   opt.settingsFile        = ""
   #
   opt.gmMaskVol           = ""                 # gray matter mask volume
   opt.t1UnderlayVol       = ""                 # t1 underlay volume

   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [Options]"
      opts.separator ""
      opts.separator "Options:"

      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }

      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }

      opts.on('-f', '--fake', 'Do not actually execute the commands') { |f| opt.fake = f }

      opts.on('--keyname subject_keyname', "subject keyname (e.g., trinity)") do |keyname|
         opt.keyname = keyname.to_s
         puts "** subject keyname: " + opt.keyname if opt.verbose
      end

      opts.on('--scanId fdg_scan_id', "Usually a scan date of format YYYYMMDD") do |scanId|
         opt.scanId = scanId
         puts "** scan Id: " + opt.scanId if opt.verbose
      end

      opts.on('--civetScanId civet_scan_id', "Usually a scan date of format YYYYMMDD") do |civetScanId|
         opt.civetScanId = civetScanId
         puts "** Civet scan date: " + opt.civetScanId if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end
         
      opts.on('--gmMaskVol gm_mask_vol', "gray matter mask volume") do |gmMaskVol|
         opt.gmMaskVol = gmMaskVol
         puts "** gray matter mask volume (fullpath): " + opt.gmMaskVol if opt.verbose
      end

      opts.on('--t1UnderlayVol t1_underlay_vol', "structural underlay volume") do |t1UnderlayVol|
         opt.t1UnderlayVol = t1UnderlayVol
         puts "** structural underlay volume (fullpath): " + opt.t1UnderlayVol if opt.verbose
      end

      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end

   end  # OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   opts.parse!(ARGV)



   # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
   #

   # check for aggregated settings file, then read if all looks OK
   if ( opt.settingsFile.empty? ) then
      puts "\n*** Error: Missing option(s) -- Loris aggregated settings file"
      puts opts
      exit
   end
   #
   if ( !File.exists?(opt.settingsFile) || !File.file?(opt.settingsFile) ) then
      puts sprintf("\n!!! Error: The specified Loris aggregated settings [%s] does not exist or is unreadable.", opt.settingsFile)
      exit
   end
   #
   settings = load_beagle_aggregated_settings(opt.settingsFile, verbose=false, debug=false)

   # init associated variables
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']
   CIVET_ROOT_DIR = settings['CIVET_ROOT_DIR']
   CIVET_PREFIX = settings['CIVET_PREFIX'] + '_'
   CIVET_FINAL_T1_VOLUME_SUFFIX = settings['CIVET_FINAL_T1_VOLUME_SUFFIX']

   # set volumetric visualization thresholds
   FDG_VOLUMETRIC_VIZ_FLOOR = settings['FDG_VOLUMETRIC_VIZ_FLOOR']
   FDG_VOLUMETRIC_VIZ_CEILING = settings['FDG_VOLUMETRIC_VIZ_CEILING']
   puts "Volumetric visualization min/max: #{FDG_VOLUMETRIC_VIZ_FLOOR}/#{FDG_VOLUMETRIC_VIZ_CEILING}" if opt.debug

   # define some useful constants
   RATIOS_VOLUME_PATTERN = '*_fdgRatios_noMask.mnc'

   # set some useful values/paths
   if ( settings['CIVET_SCANID_APPEND_SCANDATE_TO_KEYNAME'] == 'ON' ) then
      civetScan_dir = opt.keyname + '-' + opt.civetScanId
   else
      civetScan_dir = opt.keyname
   end 
   keyname_dir_fullPath = File.join(settings['LORIS_ROOT_DIR'], opt.keyname)
   #
   fdg_dir = 'FDG-' + opt.scanId
   fdg_dir_fullPath = File.join(keyname_dir_fullPath, fdg_dir)
   fdgLogs_dir_fullPath = File.join(fdg_dir_fullPath, 'logs')
   fdgImages_dir_fullPath = File.join(fdg_dir_fullPath, 'images')
   fdgRatios_dir_fullPath = File.join(fdg_dir_fullPath, 'ratios')
   fdgTmp_dir_fullPath = File.join(fdg_dir_fullPath, 'tmp')



   # * * * * *  START of input argument validation   * * * * *
   #
   # keyname has been entered?
   if ( opt.keyname.empty? or opt.scanId.empty? ) then
      puts "\n*** Error: Subject keyname OR FDG scan date is missing"
      puts opts
      exit
   end

   # Civet scan date entered?
   if ( opt.civetScanId.empty? ) then
      puts "\n*** Error: Civet scan date is missing"
      puts opts
      exit
   end

   # gray matter mask volume has been entered?
   if ( opt.gmMaskVol.empty? ) then
      puts "\n*** Error: Gray matter mask volume is missing ... we really need that."
      puts opts
      exit
   end
   
   # anatomical underlay volume has been entered?
   if ( opt.t1UnderlayVol? ) then
      puts "\n*** Error: Anatomical underlay volume is missing ... we really need that."
      puts opts
      exit
   end

   # find all ratio volumes -- must be at least one
    ratio_volumes = match_glob_in_dir(fdgRatios_dir_fullPath, pattern=RATIOS_VOLUME_PATTERN, return_matches=true, verbose=true)
   if ( ratio_volumes.length < 1 ) then
      puts sprintf("!!! Error: No FDG ratio volumes found for for %s-%s", opt.keyname, opt.scanId)
      puts opts
      exit
   end
   #
   # * * * * *  END of input argument validation   * * * * * * * *
   # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 



   # load subject's master logfile; write a start message
   progname = 'beagle_fdg_volumetric_visualization'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'FDG', opt.scanId)
   logger.log_message(progname, opt.keyname, 'FDG', opt.scanId, 'civet_version', CIVET_VERSION)

   # now that we've verified that we have a /logs subdir,
   # ... set processing status to "running"
   set_job_status(fdgLogs_dir_fullPath, "beagle_fdg_volumetric_visualization_JobStatus", "running")



   # Before we can get to mincthumbs, we need to transform the ratios
   # Specifically, mincthumbs functions best when it's displaying values
   # in which the values with the highest magnitude are of greatest
   # interest, and those closer to zero are or least interest.
   #
   # Unfortunately, our ratios work in the opposite way: ratios less
   # than 1 are of greatest interest, with those closer to zero being
   # of the most interest. So, rather than trying to coerce mincthumbs
   # to think differently, let's simply transform our ratios (for the
   # purposes of display only). Doing this also has the advantage of
   # increasing the dynamic range of ratio values.

   # subtract (1.0 - ratio) yielding difference from reference
   # ... note: mincmath requires "ratio - 1.0" so I need to dance a bit
   cmd = "mincmath   -verbose -clobber -const 1.0 -sub "
   cmd << "#{ratio_volumes[0]}  " 
   cmd << "#{fdgTmp_dir_fullPath}/tvol0.mnc "
   do_cmd(cmd, opt.verbose, opt.fake)
   #
   # flip sign and mult by 100 to gives us a percent
   cmd = "mincmath   -verbose -clobber -const -100 -mult "
   cmd << "#{fdgTmp_dir_fullPath}/tvol0.mnc   " 
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease.mnc "
   do_cmd(cmd, opt.verbose, opt.fake)

   # rescale the volume a wee bit (more)
   #cmd = "param2xfm -scales 1.1 1.1 1.1 "
   cmd = "param2xfm -scales 1.05 1.05 1.05 "
   cmd << "#{fdgTmp_dir_fullPath}/volume_rescale_1.05.xfm   " 
   #do_cmd(cmd, opt.verbose, opt.fake)
   #
   cmd = "mincresample -clobber -verbose  -tfm_input_sampling  "
   cmd << "-transform #{fdgTmp_dir_fullPath}/volume_rescale_1.05.xfm  "
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease.mnc   "
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease_rescaled.mnc "
   #do_cmd(cmd, opt.verbose, opt.fake)



   # and now, ...
   # ... build mincthumbs commandline and execute
   # ... applying gray matter mask as part of the process
   #
   vizOut = opt.keyname + "_fdgRatios_volumetricViz.pdf"
   vizOut_fullPath = File.join(fdgImages_dir_fullPath, vizOut)

   cmd = "mincthumbs   -v  "
   cmd << "-tthresh #{FDG_VOLUMETRIC_VIZ_FLOOR} "            # visualization threshold - low cutoff
   cmd << "-tceiling #{FDG_VOLUMETRIC_VIZ_CEILING}  "        # maximum absolute value in the color coding
   cmd << "-contrast 1  "                    # increase anatomical contrast
   cmd << "-pos  "                           # only show positive values
   cmd << "-nomidt  "                        # don't label the colorbar at mid-value
   cmd << "-maskimage #{opt.gmMaskVol}  "    # apply the gm mask to the ratio volume
   cmd << "-out #{vizOut_fullPath}  "        # output filename
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease.mnc  "    # ratio volume
   cmd << "#{opt.t1UnderlayVol}  "                          # anatomical underlay
   do_cmd(cmd, opt.verbose, opt.fake)


   # set job status to "finished"
   set_job_status(fdgLogs_dir_fullPath, "beagle_fdg_volumetric_visualization_JobStatus", "finished")

   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'FDG', opt.scanId)
   logger.save_to_file()

rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  #main()


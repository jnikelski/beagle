#!/usr/bin/env ruby
# ==============================================================================
# Purpose:
#     Initialize the anatomically-based Beagle output subdirectories.
#
# ==============================================================================

require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'
require 'tmpdir'            # needed for Dir::tmpdir

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_civet_function_library'
require 'beagle_logger_classes'

# start of main script
begin
   opt                     = OpenStruct.new{}   # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.fake                = false
   opt.keyname             = ""
   opt.civetScanDate       = ""
   opt.logDir              = ""          # logfile/status directory
   opt.logfile             = ""          # logfile
   opt.settingsFile        = ""

   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [Options]"
      opts.separator ""
      opts.separator "Options:"

      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }

      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }
   
      opts.on('-f', '--fake', 'Do not actually execute the commands') { |f| opt.fake = f }

      opts.on('--keyname subject_keyname', "Anonymizing keyname for this subject") do |keyname|
         opt.keyname = keyname
         puts "** keyname: " + opt.keyname if opt.verbose
      end

      opts.on('--civetScanDate civet_scan_date', "Format YYYYMMDD") do |civetScanDate|
         opt.civetScanDate = civetScanDate
         puts "** Civet scan date: " + opt.civetScanDate if opt.verbose
      end

      opts.on('--logDir logfile_directory', "Logfile directory") do |lfD|
         opt.logDir = lfD.to_s
         puts "** logfile directory: " + opt.logDir if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end

      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end

   end  # OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   begin
      opts.parse!(ARGV)
   rescue Exception => e
      puts e, "", opts
      exit
   end



   # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
   #

   # check for aggregated settings file, then read if all looks OK
   if ( opt.settingsFile.empty? || opt.keyname.empty? ) then
      puts "\n*** Error: Missing option(s) -- keyname or Loris aggregated settings file"
      puts opts
      exit
   end
   #
   if ( !File.exists?(opt.settingsFile) || !File.file?(opt.settingsFile) ) then
      puts sprintf("\n!!! Error: The specified Loris aggregated settings [%s] does not exist or is unreadable.", opt.settingsFile)
      exit
   end
   #
   settings = load_beagle_aggregated_settings(opt.settingsFile, verbose=false, debug=false)


   # init selected constants
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']

   CIVET_TISSUE_TYPE_BACKGROUND = settings['CIVET_TISSUE_TYPE_BACKGROUND']
   CIVET_TISSUE_TYPE_CSF = settings['CIVET_TISSUE_TYPE_CSF']
   CIVET_TISSUE_TYPE_GM = settings['CIVET_TISSUE_TYPE_GM']
   CIVET_TISSUE_TYPE_WM = settings['CIVET_TISSUE_TYPE_WM']
   CLASSIFY_VOLNAME_NOSKULL = 'pve_classify_noskull.mnc'

   MASKS_WHOLEBRAIN_CSF_FILENAME = settings['MASKS_WHOLEBRAIN_CSF_FILENAME']
   MASKS_WHOLEBRAIN_GM_FILENAME = settings['MASKS_WHOLEBRAIN_GM_FILENAME']
   MASKS_WHOLEBRAIN_WM_FILENAME = settings['MASKS_WHOLEBRAIN_WM_FILENAME']
   MASKS_CORTICAL_WM_FILENAME = settings['MASKS_CORTICAL_WM_FILENAME']
   MASKS_NATIVE_SKULL_FILENAME = 'skull_mask_native.mnc'

   # skull-stripped versions of the corresponding Civet products
   VBM_FWHM = "8"
   VBM_BASENAME_GM_NOSKULL = "smooth_#{VBM_FWHM}mm_gm_noskull"
   VBM_BASENAME_WM_NOSKULL = "smooth_#{VBM_FWHM}mm_wm_noskull"


   # set some useful variables / paths
   keyname_dir_fullPath = File.join(LORIS_ROOT_DIR, opt.keyname)
   logs_dir_fullPath = File.join(keyname_dir_fullPath, 'logs')
   

   # check Civet scan directory ... just make sure it's there, and then
   # ... create sub-directories, as required
   if !civetScanDirectoryName = civet_getScanDirectoryName(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, fullpath:false, checkExistence:true) then exit end

   # ensure that the Civet final tissue classification voluume exists
   if !classify_volname_fullpath = civet_getFilenameClassify(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, fullpath:true, checkExistence:true) then
      puts sprintf("\n!!! Error: Attempted read of Civet classify volume for subject **%s-%s** failed.", opt.keyname, opt.civetScanDate)
      exit
   end

   # ensure that the Civet brain mask exists
   if !civet_brain_mask_volname_fullpath = civet_getFilenameCerebrumMask(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, fullpath:true, checkExistence:true) then
      puts sprintf("\n!!! Error: Attempted read of Civet brain mask for subject **%s-%s** failed.", opt.keyname, opt.civetScanDate)
      exit
   end
   
   # ensure that the Civet skull mask exists
   if !civet_skull_mask_volname_fullpath = civet_getFilenameSkullMask(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, fullpath:true, checkExistence:true) then
      puts sprintf("\n!!! Error: Attempted read of Civet skull mask for subject **%s-%s** failed.", opt.keyname, opt.civetScanDate)
      exit
   end

   # ensure that the Civet VBM volumes exist
   civet_vbm_volnames_fullpath = civet_getFilenamesVbmBlurred(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, fullpath:true, checkExistence:true)

   # make sure we returned an array with 3 elements (gm, wm, csf)
   if civet_vbm_volnames_fullpath.length != 3 then
      puts sprintf("\n!!! Error: Attempted read of Civet VBM volnames for subject **%s-%s** failed.", opt.keyname, opt.civetScanDate)
      puts sprintf("\n!!! Expected 3 volume names, but received %d", civet_vbm_volnames_fullpath.length)
      exit
   end
   #
   # make convenient assignments
   civet_vbm_gm_volname_fullpath = civet_vbm_volnames_fullpath[0]
   civet_vbm_wm_volname_fullpath = civet_vbm_volnames_fullpath[1]
   civet_vbm_csf_volname_fullpath = civet_vbm_volnames_fullpath[2]

   # ensure that the Civet linear xfm file exists
   if !civet_icbm_xfm_filename_fullpath = civet_getFilenameLinearTransform(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, fullpath:true, checkExistence:true) then
      puts sprintf("\n!!! Error: Attempted read of Civet linear xfm file for subject **%s-%s** failed.", opt.keyname, opt.civetScanDate)
      exit
   end

   # ensure that the Civet nuc native space volume exists
   if !civet_native_mri_volname_fullpath = civet_getFilenameNativeNUC(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, fullpath:true, checkExistence:true) then
      puts sprintf("\n!!! Error: Attempted read of Civet nuc native space volume for subject **%s-%s** failed.", opt.keyname, opt.civetScanDate)
      exit
   end


   # load subject's master logfile; write a start message
   progname = 'beagle_anatomical_initialization'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'anatomical', opt.civetScanDate)
   logger.log_message(progname, opt.keyname, 'anatomical', opt.civetScanDate, 'civet_version', CIVET_VERSION)


   # good, now we can set a 'running' status in the logs subdir
   # NB: add "status" at the end of the script name to keep this
   #     file from clobbering the log file
   set_job_status(logs_dir_fullPath, "beagle_anatomical_initialization_JobStatus", "running")



   # new create anatomically-based subdirs within this directory
   #
   # -- AAL
   aal_subdir_name = 'AAL-' + opt.civetScanDate
   filename = File.join(keyname_dir_fullPath, aal_subdir_name)
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   # write ID of associated anatomical scan into the directory
   File.open(File.join(filename,'civet_scan_id.txt'), 'w') {|f| f.write("#{civetScanDirectoryName}\n");f.close}
   #
   filename = File.join(keyname_dir_fullPath, aal_subdir_name, "logs")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   #
   filename = File.join(keyname_dir_fullPath, aal_subdir_name, "images")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end


   # -- MASKS
   #
   # start by creating the masks dir and all needed subdirs
   masks_dir = 'masks-' + opt.civetScanDate
   masks_dir_fullPath = File.join(keyname_dir_fullPath, masks_dir)
   masksLogs_dir_fullPath = File.join(masks_dir_fullPath, 'logs')

   filename = masks_dir_fullPath
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   # write ID of associated anatomical scan into the directory
   File.open(File.join(filename,'civet_scan_id.txt'), 'w') {|f| f.write("#{civetScanDirectoryName}\n");f.close}
   #
   filename = masksLogs_dir_fullPath
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end


   # next, create a selection of mask volumes from the final (discrete-ish, non-pve) 
   # tissue classification volume (stored as discrete-ish float values)

   # but first, apply the skull mask to the classify volume, because since Civet version 1.1.12,
   # all of the classify products are not skull-stripped, and we need to remove out-of-brain
   # voxels.
   classify_volname_noskull_fullpath = File.join(masks_dir_fullPath, CLASSIFY_VOLNAME_NOSKULL)
   cmd = "mincmath -clobber -verbose -short  -unsigned -mult "
   cmd << "#{civet_skull_mask_volname_fullpath} "
   cmd << "#{classify_volname_fullpath} "
   cmd << "#{classify_volname_noskull_fullpath} "
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)


   # create a gray matter mask from the final classify volume
   # ... set the volume type to -short, as we'll be blurring this volume
   fudge = 0.1
   const1 = CIVET_TISSUE_TYPE_GM.to_f - fudge
   const2 = CIVET_TISSUE_TYPE_GM.to_f + fudge
   cmd = "mincmath -clobber -verbose "
   cmd << "-short  -unsigned  "
   cmd << "-const2 #{const1.to_s} #{const2.to_s} "
   cmd << "-segment "
   cmd << "#{classify_volname_noskull_fullpath} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_WHOLEBRAIN_GM_FILENAME} "
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)


   # create a white matter mask from the final classify volume
   # ... this mask contains all white matter: cortical, cerebellum, and brainstem
   const1 = CIVET_TISSUE_TYPE_WM.to_f - fudge
   const2 = CIVET_TISSUE_TYPE_WM.to_f + fudge
   cmd = "mincmath -clobber -verbose "
   cmd << "-short  -unsigned  "
   cmd << "-const2 #{const1.to_s} #{const2.to_s} "
   cmd << "-segment "
   cmd << "#{classify_volname_noskull_fullpath} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_WHOLEBRAIN_WM_FILENAME} "
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)


   # create a cortical white matter mask by applying the Civet brainmask to the above WM mask
   # ... this mask does NOT contain cerebellum or brainstem
   cmd = "mincmath -clobber -verbose "
   cmd << "-short  -unsigned  "
   cmd << "-and "
   cmd << "#{masks_dir_fullPath}/#{MASKS_WHOLEBRAIN_WM_FILENAME} "
   cmd << "#{civet_brain_mask_volname_fullpath} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_CORTICAL_WM_FILENAME} "
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)


   # create a CSF mask from the final classify volume
   const1 = CIVET_TISSUE_TYPE_CSF.to_f - fudge
   const2 = CIVET_TISSUE_TYPE_CSF.to_f + fudge
   cmd = "mincmath -clobber -verbose "
   cmd << "-short  -unsigned  "
   cmd << "-const2 #{const1.to_s} #{const2.to_s} "
   cmd << "-segment "
   cmd << "#{classify_volname_noskull_fullpath} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_WHOLEBRAIN_CSF_FILENAME} "
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)


   # we need to create a native skull mask, 
   # ... as if would appear as if Civet >= 1.1.12 removed it
   cmd = "mincresample -clobber -verbose -byte -nearest_neighbour "
   cmd << "-transformation #{civet_icbm_xfm_filename_fullpath}  "
   cmd << "-invert_transformation "
   cmd << "-like #{civet_native_mri_volname_fullpath} "
   cmd << "#{civet_skull_mask_volname_fullpath} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_NATIVE_SKULL_FILENAME} "
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)


   # -- VBM
   vbm_subdir_name = 'VBM-' + opt.civetScanDate
   vbm_dir_fullpath = File.join(keyname_dir_fullPath, vbm_subdir_name)
   if !File.exists?( vbm_dir_fullpath ) then FileUtils.mkdir( vbm_dir_fullpath ) end
   
   # write ID of associated anatomical scan into the directory
   File.open(File.join(vbm_dir_fullpath,'civet_scan_id.txt'), 'w') {|f| f.write("#{civetScanDirectoryName}\n");f.close}
   #
   dirname = File.join(vbm_dir_fullpath, "logs")
   if !File.exists?( dirname ) then FileUtils.mkdir( dirname ) end
   #
   dirname = File.join(vbm_dir_fullpath, "images")
   if !File.exists?( dirname ) then FileUtils.mkdir( dirname ) end


   # next, blur the discrete GM mask created in the previous MASKS step
   # yes, Civet does this, but Civet 1.1.12 and greater have stopped 
   # skull-stripping, so need to do this myself
   vbm_basename_gm_noskull_fullpath = File.join(vbm_dir_fullpath, VBM_BASENAME_GM_NOSKULL)
   cmd = "mincblur -clobber -verbose -gaussian -fwhm #{VBM_FWHM} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_WHOLEBRAIN_GM_FILENAME} "
   cmd << "#{vbm_basename_gm_noskull_fullpath} "
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)

   vbm_basename_wm_noskull_fullpath = File.join(vbm_dir_fullpath, VBM_BASENAME_WM_NOSKULL)
   cmd = "mincblur -clobber -verbose -gaussian -fwhm 8 "
   cmd << "#{masks_dir_fullPath}/#{MASKS_WHOLEBRAIN_WM_FILENAME} "
   cmd << "#{vbm_basename_wm_noskull_fullpath} "
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)


   # -- THICKNESS
   thickness_subdir_name = 'thickness-' + opt.civetScanDate
   filename = File.join(keyname_dir_fullPath, thickness_subdir_name)
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   # write ID of associated anatomical scan into the directory
   File.open(File.join(filename,'civet_scan_id.txt'), 'w') {|f| f.write("#{civetScanDirectoryName}\n");f.close}
   #
   filename = File.join(keyname_dir_fullPath, thickness_subdir_name, "tmp")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   #
   filename = File.join(keyname_dir_fullPath, thickness_subdir_name, "logs")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   #
   filename = File.join(keyname_dir_fullPath, thickness_subdir_name, "images")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end


   # -- VISUALIZATION
   filename = File.join(keyname_dir_fullPath, "visualization")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end

   # put a copy of various Civet files in here, for visualization convenience
   # ... final spatially normalized T1 volume
   from_filename = civet_getFilenameStxT1(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, fullpath:false)
   from_filename_fullPath = civet_getFilenameStxT1(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt)
   to_dir = File.join(keyname_dir_fullPath, "visualization")
   to_filename_fullPath = File.join(to_dir, from_filename)
   if !File.exists?( to_filename_fullPath ) then FileUtils.cp(from_filename_fullPath, to_dir) end
   #
   # ... left/right hemisphere gray matter surfaces
   from_filename_lh, from_filename_rh = civet_getFilenameGrayMatterSurfaces(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, resampled:false, fullpath:false)
   from_filename_fullPath_lh, from_filename_fullPath_rh = civet_getFilenameGrayMatterSurfaces(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, resampled:false, fullpath:true)
   #
   # ... LH
   to_dir = File.join(keyname_dir_fullPath, "visualization")
   to_filename_fullPath = File.join(to_dir, from_filename_lh)
   if !File.exists?( to_filename_fullPath ) then FileUtils.cp(from_filename_fullPath_lh, to_dir) end
   #
   # ... RH
   to_dir = File.join(keyname_dir_fullPath, "visualization")
   to_filename_fullPath = File.join(to_dir, from_filename_rh)
   if !File.exists?( to_filename_fullPath ) then FileUtils.cp(from_filename_fullPath_rh, to_dir) end


   # set job status to done
   set_job_status(logs_dir_fullPath, "beagle_anatomical_initialization_JobStatus", "finished")

   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'anatomical', opt.civetScanDate)
   logger.save_to_file()


rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  #main()


#!/usr/bin/env ruby
# ==============================================================================
# Purpose:
#     Initialize the anatomically-based Beagle output subdirectories.
#
# ==============================================================================

require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'
require 'tmpdir'            # needed for Dir::tmpdir

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_civet_function_library'
require 'beagle_logger_classes'

# start of main script
begin
   opt                     = OpenStruct.new{}   # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.keyname             = ""
   opt.civetScanDate       = ""
   opt.settingsFile        = ""

   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [Options]"
      opts.separator ""
      opts.separator "Options:"

      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }

      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }
   
      opts.on('--keyname subject_keyname', "Anonymizing keyname for this subject") do |keyname|
         opt.keyname = keyname
         puts "** keyname: " + opt.keyname if opt.verbose
      end

      opts.on('--civetScanDate civet_scan_date', "Format YYYYMMDD") do |civetScanDate|
         opt.civetScanDate = civetScanDate
         puts "** Civet scan date: " + opt.civetScanDate if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end

      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end

   end  # OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   begin
      opts.parse!(ARGV)
   rescue Exception => e
      puts e, "", opts
      exit
   end



   # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
   #

   # check for aggregated settings file, then read if all looks OK
   if ( opt.settingsFile.empty? || opt.keyname.empty? ) then
      puts "\n*** Error: Missing option(s) -- keyname or Loris aggregated settings file"
      puts opts
      exit
   end
   #
   if ( !File.exists?(opt.settingsFile) || !File.file?(opt.settingsFile) ) then
      puts sprintf("\n!!! Error: The specified Loris aggregated settings [%s] does not exist or is unreadable.", opt.settingsFile)
      exit
   end
   #
   settings = load_beagle_aggregated_settings(opt.settingsFile, verbose=false, debug=false)


   # init selected variables
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']
   

   # set some useful values
   keyname_dir_fullPath = File.join(settings['LORIS_ROOT_DIR'], opt.keyname)


   # check Civet scan directory ... just make sure it's there, and then
   # ... create sub-directories, as required
   if !civetScanDirectoryName = civet_getScanDirectoryName(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, fullpath:false, checkExistence:true) then exit end


   # load subject's master logfile; write a start message
   progname = 'beagle_anatomical_initialization'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'anatomical', opt.civetScanDate)
   logger.log_message(progname, opt.keyname, 'anatomical', opt.civetScanDate, 'civet_version', CIVET_VERSION)


   # new create anatomically-based subdirs within this directory
   #
   # -- AAL
   aal_subdir_name = 'AAL-' + opt.civetScanDate
   filename = File.join(keyname_dir_fullPath, aal_subdir_name)
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   # write ID of associated anatomical scan into the directory
   File.open(File.join(filename,'civet_scan_id.txt'), 'w') {|f| f.write("#{civetScanDirectoryName}\n");f.close}
   #
   filename = File.join(keyname_dir_fullPath, aal_subdir_name, "logs")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   #
   filename = File.join(keyname_dir_fullPath, aal_subdir_name, "images")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end


   # -- MASKS
   masks_subdir_name = 'masks-' + opt.civetScanDate
   filename = File.join(keyname_dir_fullPath, masks_subdir_name)
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   # write ID of associated anatomical scan into the directory
   File.open(File.join(filename,'civet_scan_id.txt'), 'w') {|f| f.write("#{civetScanDirectoryName}\n");f.close}
   #
   filename = File.join(keyname_dir_fullPath, masks_subdir_name, "logs")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end


   # -- VBM
   vbm_subdir_name = 'VBM-' + opt.civetScanDate
   filename = File.join(keyname_dir_fullPath, vbm_subdir_name)
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   # write ID of associated anatomical scan into the directory
   File.open(File.join(filename,'civet_scan_id.txt'), 'w') {|f| f.write("#{civetScanDirectoryName}\n");f.close}
   #
   filename = File.join(keyname_dir_fullPath, vbm_subdir_name, "logs")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   #
   filename = File.join(keyname_dir_fullPath, vbm_subdir_name, "images")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end


   # -- THICKNESS
   thickness_subdir_name = 'thickness-' + opt.civetScanDate
   filename = File.join(keyname_dir_fullPath, thickness_subdir_name)
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   # write ID of associated anatomical scan into the directory
   File.open(File.join(filename,'civet_scan_id.txt'), 'w') {|f| f.write("#{civetScanDirectoryName}\n");f.close}
   #
   filename = File.join(keyname_dir_fullPath, thickness_subdir_name, "tmp")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   #
   filename = File.join(keyname_dir_fullPath, thickness_subdir_name, "logs")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end
   #
   filename = File.join(keyname_dir_fullPath, thickness_subdir_name, "images")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end


   # -- VISUALIZATION
   filename = File.join(keyname_dir_fullPath, "visualization")
   if !File.exists?( filename ) then FileUtils.mkdir( filename ) end

   # put a copy of various Civet files in here, for visualization convenience
   # ... final spatially normalized T1 volume
   from_filename = civet_getFilenameStxT1(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, fullpath:false)
   from_filename_fullPath = civet_getFilenameStxT1(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt)
   to_dir = File.join(keyname_dir_fullPath, "visualization")
   to_filename_fullPath = File.join(to_dir, from_filename)
   if !File.exists?( to_filename_fullPath ) then FileUtils.cp(from_filename_fullPath, to_dir) end
   #
   # ... left/right hemisphere gray matter surfaces
   from_filename_lh, from_filename_rh = civet_getFilenameGrayMatterSurfaces(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, resampled:false, fullpath:false)
   from_filename_fullPath_lh, from_filename_fullPath_rh = civet_getFilenameGrayMatterSurfaces(civet_keyname:opt.keyname, civet_scanid:opt.civetScanDate, settings:settings, opt:opt, resampled:false, fullpath:true)
   #
   # ... LH
   to_dir = File.join(keyname_dir_fullPath, "visualization")
   to_filename_fullPath = File.join(to_dir, from_filename_lh)
   if !File.exists?( to_filename_fullPath ) then FileUtils.cp(from_filename_fullPath_lh, to_dir) end
   #
   # ... RH
   to_dir = File.join(keyname_dir_fullPath, "visualization")
   to_filename_fullPath = File.join(to_dir, from_filename_rh)
   if !File.exists?( to_filename_fullPath ) then FileUtils.cp(from_filename_fullPath_rh, to_dir) end

   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'anatomical', opt.civetScanDate)
   logger.save_to_file()


rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  #main()


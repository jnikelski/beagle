#!/usr/bin/env ruby
# ==============================================================================
# PURPOSE:
#    This script is supposed to be executed by it's driver, to produce
#      surface visualization of FDG ratios.
#
# ==============================================================================

require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'
require 'tmpdir'            # needed for Dir::tmpdir

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_logger_classes'

# start of main script
begin
   opt                     = OpenStruct.new{}  # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.fake                = false
   #
   opt.keyname             = ""
   opt.scanDate            = ""
   opt.scanId              = ""                 # this is a derived value
   opt.civetScanDate       = ""
   opt.settingsFile        = ""
   #
   opt.csfPmapVolume       = ""                 # CSF pmap vol for visualization masking
   opt.avgLhSurface        = ""                 # average LH surface file
   opt.avgRhSurface        = ""                 # average RH surface file
   opt.indivLhSurface      = ""                 # subject-specific LH surface file
   opt.indivRhSurface      = ""                 # subject-specific RH surface file
   opt.colorMap            = "hot"              # MNI colormap to use



   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [Options]"
      opts.separator ""
      opts.separator "Options:"

      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }

      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }

      opts.on('-f', '--fake', 'Do not actually execute the commands') { |f| opt.fake = f }

      opts.on('--keyname subject_keyname', "subject keyname (e.g., trinity)") do |keyname|
         opt.keyname = keyname.to_s
         puts "** subject keyname: " + opt.keyname if opt.verbose
      end
      
      opts.on('--scanDate scan_date', "Format YYYYMMDD") do |scanDate|
         opt.scanDate = scanDate
         puts "** scan date: " + opt.scanDate if opt.verbose
      end

      opts.on('--civetScanDate civet_scan_id', "Format keyname-scanDate") do |civetScanDate|
         opt.civetScanDate = civetScanDate
         puts "** Civet scan date: " + opt.civetScanDate if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end

      opts.on('--csfPmapVolume csf_pmap_volume', "Full path to CSF probability map volume") do |csfpmap|
         opt.csfPmapVolume = csfpmap
         puts "** CSF probability map (fullpath to .mnc file): " + opt.csfPmapVolume if opt.verbose
      end

      opts.on('--colorMap color_map', "color map to use in display (default is '#{opt.colorMap}')") do |cMap|
         opt.colorMap = cMap.to_s
         puts "** color map: " + opt.colorMap if opt.verbose
      end

      opts.on('--avgLhSurface avg_LH_surface', "average LH surface") do |avgLhSurface|
         opt.avgLhSurface = avgLhSurface
         puts "** average LH surface (fullpath to .obj file): " + opt.avgLhSurface if opt.verbose
      end

      opts.on('--avgRhSurface avg_RH_surface', "average RH surface") do |avgRhSurface|
         opt.avgRhSurface = avgRhSurface
         puts "** average RH surface (fullpath to .obj file): " + opt.avgRhSurface if opt.verbose
      end

      opts.on('--indivLhSurface individual_LH_surface', "individual LH surface") do |indivLhSurface|
         opt.indivLhSurface = indivLhSurface
         puts "** individual LH surface (fullpath to .obj file): " + opt.indivLhSurface if opt.verbose
      end

      opts.on('--indivRhSurface individual_RH_surface', "individual RH surface") do |indivRhSurface|
         opt.indivRhSurface = indivRhSurface
         puts "** individual RH surface (fullpath to .obj file): " + opt.indivRhSurface if opt.verbose
      end

      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end

   end  # OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   begin
      opts.parse!(ARGV)
   rescue Exception => e
      puts e, "", opts
      exit
   end



   # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
   #


   # check for aggregated settings file, then read if all looks OK
   if ( opt.settingsFile.empty? ) then
      puts "\n*** Error: Missing option(s) -- Loris aggregated settings file"
      puts opts
      exit
   end
   #
   if ( !File.exists?(opt.settingsFile) || !File.file?(opt.settingsFile) ) then
      puts sprintf("\n!!! Error: The specified Loris aggregated settings [%s] does not exist or is unreadable.", opt.settingsFile)
      exit
   end
   #
   settings = load_loris_aggregated_settings(opt.settingsFile, verbose=false, debug=false)

   # init associated variables
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']
   CIVET_ROOT_DIR = settings['CIVET_ROOT_DIR']
   CIVET_PREFIX = settings['CIVET_PREFIX'] + '_'

   # set volumetric visualization thresholds
   FDG_SURFACE_VIZ_FLOOR = settings['FDG_SURFACE_VIZ_FLOOR']
   FDG_SURFACE_VIZ_CEILING = settings['FDG_SURFACE_VIZ_CEILING']
   puts "Surface visualization min/max: #{FDG_SURFACE_VIZ_FLOOR}/#{FDG_SURFACE_VIZ_CEILING}" if opt.debug

   # define some useful constants
   CSF_MASK_VOLNAME = 'wholeBrain_csf_mask.mnc'
   RATIOS_VOLUME_PATTERN = '*_fdgRatios_noMask.mnc'

   # set some useful values/paths
   opt.scanId = opt.keyname + '-' + opt.scanDate
   opt.civetScanId = opt.keyname + '-' + opt.civetScanDate
   keyname_dir_fullPath = File.join(settings['LORIS_ROOT_DIR'], opt.keyname)
   #
   fdg_dir = 'FDG-' + opt.scanDate
   fdg_dir_fullPath = File.join(keyname_dir_fullPath, fdg_dir)
   fdgLogs_dir_fullPath = File.join(fdg_dir_fullPath, 'logs')
   fdgImages_dir_fullPath = File.join(fdg_dir_fullPath, 'images')
   fdgRatios_dir_fullPath = File.join(fdg_dir_fullPath, 'ratios')
   fdgTmp_dir_fullPath = File.join(fdg_dir_fullPath, 'tmp')
   #
   masks_dir = 'MASKS-' + opt.civetScanDate
   masks_dir_fullPath = File.join(keyname_dir_fullPath, masks_dir)




   # * * * * *  START of input argument validation   * * * * *
   #
   # keyname has been entered?
   if ( opt.keyname.empty? or opt.scanDate.empty? ) then
      puts "\n*** Error: Subject keyname OR FDG scan date is missing"
      puts opts
      exit
   end

   # Civet scan date entered?
   if ( opt.civetScanDate.empty? ) then
      puts "\n*** Error: Civet scan date is missing"
      puts opts
      exit
   end

   
   # anatomical underlay volume has been entered?
   if ( opt.t1UnderlayVol? ) then
      puts "\n*** Error: Anatomical underlay volume is missing ... we really need that."
      puts opts
      exit
   end
   
   # both averaged surface objects entered?
   if ( opt.avgLhSurface.empty? or opt.avgRhSurface.empty? ) then
      puts "\n*** Error: One or both of the averaged surface objects have not been entered."
      puts opts
      exit
   end
   
   # both subject-specific surface objects entered?
   if ( opt.indivLhSurface.empty? or opt.indivRhSurface.empty? ) then
      puts "\n*** Error: One or both of the subject-specific surface objects have not been entered."
      puts opts
      exit
   end

   # find all ratio volumes -- must be at least one
    ratio_volumes = match_glob_in_dir(fdgRatios_dir_fullPath, pattern=RATIOS_VOLUME_PATTERN, return_matches=true, verbose=true)
   if ( ratio_volumes.length < 1 ) then
      puts sprintf("!!! Error: No FDG ratio volumes found for for %s-%s", opt.keyname, opt.scanId)
      puts opts
      exit
   end

   # check if the temporary working directory exists; if not, create it
   # Note: if often clear out the tmp dir at end of processing by 
   #       deleting it -- that's why we need to re-create it
   if !File.exists?(fdgTmp_dir_fullPath) then Dir.mkdir(fdgTmp_dir_fullPath) end
   #
   # * * * * *  END of input argument validation   * * * * * * * *
   # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 



   # load subject's master logfile; write a start message
   progname = 'beagle_fdg_surface_visualization'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'FDG', opt.scanDate)
   logger.log_message(progname, opt.keyname, 'FDG', opt.scanDate, 'civet_version', CIVET_VERSION)

   # now that we've verified that we have a /logs subdir,
   # ... set processing status to "running"
   set_job_status(fdgLogs_dir_fullPath, "beagle_fdg_surface_visualization_JobStatus", "running")



   # the visualization of ratios bounded between 0.0 and 1.0, in which
   # values closer to zero are of greatest interest, is difficult to
   # show using a spectral color map. So, we are going to transform
   # the ratios into "% decrease relative to cerebellum". This will
   # provide us with values with an upper bound of 100% -- the lower
   # bound can become negative ... but we aren't really interested 
   # in hyper-metabolic areas.

   # ... subtract (1.0 - ratio) yielding difference from reference
   # ... note: mincmath requires "ratio - 1.0" so I need to dance a bit
   cmd = "mincmath   -verbose -clobber -const 1.0 -sub "
   cmd << "#{ratio_volumes[0]}  " 
   cmd << "#{fdgTmp_dir_fullPath}/tvol0.mnc "
   do_cmd(cmd, opt.verbose, opt.fake)
   #
   # ... flip sign and mult by 100 to gives us a percent
   cmd = "mincmath   -verbose -clobber -const -100 -mult "
   cmd << "#{fdgTmp_dir_fullPath}/tvol0.mnc   " 
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease.mnc "
   do_cmd(cmd, opt.verbose, opt.fake)


   # apply a CSF mask to clear cruft from the ventricles
   # ... first, need to create a thresholded mask
   cmd = "mincmath   -verbose -clobber -const2 0.5 1.00 -segment "
   cmd << "#{opt.csfPmapVolume}   " 
   cmd << "#{fdgTmp_dir_fullPath}/model_thesholded_csf_mask.mnc "
   do_cmd(cmd, opt.verbose, opt.fake)
   # ... invert
   cmd = "mincmath   -verbose -clobber -const2 0 0 -segment "
   cmd << "#{fdgTmp_dir_fullPath}/model_thesholded_csf_mask.mnc "
   cmd << "#{fdgTmp_dir_fullPath}/model_thesholded_csf_mask_inverted.mnc "
   do_cmd(cmd, opt.verbose, opt.fake)
   # ... apply
   cmd = "mincmath   -verbose -clobber -mult "
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease.mnc   " 
   cmd << "#{fdgTmp_dir_fullPath}/model_thesholded_csf_mask_inverted.mnc "
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease_masked0.mnc "
   do_cmd(cmd, opt.verbose, opt.fake)

   # also, apply the individuals CSF mask as well
   # ... invert
   cmd = "mincmath   -verbose -clobber -const2 0 0 -segment "
   cmd << "#{masks_dir_fullPath}/#{CSF_MASK_VOLNAME} "
   cmd << "#{fdgTmp_dir_fullPath}/subject_csf_mask.mnc "
   do_cmd(cmd, opt.verbose, opt.fake)
   # ... apply
   cmd = "mincmath   -verbose -clobber -mult "
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease_masked0.mnc   " 
   cmd << "#{fdgTmp_dir_fullPath}/subject_csf_mask.mnc  "
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease_masked.mnc "
   do_cmd(cmd, opt.verbose, opt.fake)


   # rescale the volume
   #cmd = "param2xfm -clobber -scales 1.1 1.1 1.1 "
   cmd = "param2xfm -clobber -scales 1.05 1.05 1.05 "
   cmd << "#{fdgTmp_dir_fullPath}/volume_rescale_1.05.xfm   " 
   do_cmd(cmd, opt.verbose, opt.fake)
   #
   cmd = "mincresample -clobber -verbose  -tfm_input_sampling  "
   cmd << "-transform #{fdgTmp_dir_fullPath}/volume_rescale_1.05.xfm  "
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease_masked.mnc   "
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease_masked_rescaled.mnc "
   #do_cmd(cmd, opt.verbose, opt.fake)



   
   # create the various left and right hemisphere surface image components
   #
   # Render onto AVERAGE surface first
   #
   
   # define and create the tmp output directorys
   lh_images_dir = File.join(fdgTmp_dir_fullPath, 'lh_images_avgSurf')
   FileUtils.mkdir_p(lh_images_dir)
   rh_images_dir = File.join(fdgTmp_dir_fullPath, 'rh_images_avgSurf')
   FileUtils.mkdir_p(rh_images_dir)

   # create LH surface components
   cmd = "hclab_make_surface_images   -v   "
   cmd << "--valueRange=#{FDG_SURFACE_VIZ_FLOOR},#{FDG_SURFACE_VIZ_CEILING}  "   # visualization threshold - low cutoff
   cmd << "--colorMap=#{opt.colorMap}  "                 #  maximum absolute value in the color coding
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease_masked.mnc "        # pct ratio volume
   cmd << "#{opt.avgLhSurface}  "                        # surface to render upon
   cmd << "#{lh_images_dir}"
   do_cmd(cmd, opt.verbose, opt.fake)

   # create RH surface components
   cmd = "hclab_make_surface_images   -v   "
   cmd << "--valueRange=#{FDG_SURFACE_VIZ_FLOOR},#{FDG_SURFACE_VIZ_CEILING}  "   # visualization threshold - low cutoff
   cmd << "--colorMap=#{opt.colorMap}  "     # maximum absolute value in the color coding
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease_masked.mnc "        # pct ratio volume
   cmd << "#{opt.avgRhSurface}  "                              # surface to render upon
   cmd << "#{rh_images_dir}"
   do_cmd(cmd, opt.verbose, opt.fake)

   # create the summary image
   vizOut = opt.keyname + "_fdgRatios_averageSurfaceViz.png"
   vizOut_fullPath = File.join(fdgImages_dir_fullPath, vizOut)
   cmd = "hclab_make_summary_image -v    "
   cmd << "#{lh_images_dir}  "
   cmd << "#{rh_images_dir}  "
   cmd << "#{vizOut_fullPath}"
   do_cmd(cmd, opt.verbose, opt.fake)

   # clean up the temp directories
   FileUtils.remove_dir(lh_images_dir)
   FileUtils.remove_dir(rh_images_dir)

   # Render onto INDIVIDUAL surface
   #
   # define and create the tmp output directorys
   lh_images_dir = File.join(fdgTmp_dir_fullPath, 'lh_images_indivSurf')
   FileUtils.mkdir_p(lh_images_dir)
   rh_images_dir = File.join(fdgTmp_dir_fullPath, 'rh_images_indivSurf')
   FileUtils.mkdir_p(rh_images_dir)

   # create LH surface components
   cmd = "hclab_make_surface_images   -v   "
   cmd << "--valueRange=#{FDG_SURFACE_VIZ_FLOOR},#{FDG_SURFACE_VIZ_CEILING}  "   # visualization threshold - low cutoff
   cmd << "--colorMap=#{opt.colorMap}  "     # maximum absolute value in the color coding
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease_masked.mnc "        # pct ratio volume
   cmd << "#{opt.indivLhSurface}  "                            # surface to render upon
   cmd << "#{lh_images_dir}"
   do_cmd(cmd, opt.verbose, opt.fake)

   # create RH surface components
   cmd = "hclab_make_surface_images   -v   "
   cmd << "--valueRange=#{FDG_SURFACE_VIZ_FLOOR},#{FDG_SURFACE_VIZ_CEILING}  "   # visualization threshold - low cutoff
   cmd << "--colorMap=#{opt.colorMap}  "     # maximum absolute value in the color coding
   cmd << "#{fdgTmp_dir_fullPath}/ratios_pct_decrease_masked.mnc "        # pct ratio volume
   cmd << "#{opt.indivRhSurface}  "                            # surface to render upon
   cmd << "#{rh_images_dir}"
   do_cmd(cmd, opt.verbose, opt.fake)

   # create the summary image
   vizOut = opt.keyname + "_fdgRatios_individualSurfaceViz.png"
   vizOut_fullPath = File.join(fdgImages_dir_fullPath, vizOut)
   cmd = "hclab_make_summary_image -v    "
   cmd << "#{lh_images_dir}  "
   cmd << "#{rh_images_dir}  "
   cmd << "#{vizOut_fullPath}"
   do_cmd(cmd, opt.verbose, opt.fake)

   # clean up the temp directories
   FileUtils.remove_dir(lh_images_dir)
   FileUtils.remove_dir(rh_images_dir)

   # set job status to "finished"
   set_job_status(fdgLogs_dir_fullPath, "beagle_fdg_surface_visualization_JobStatus", "finished")
   
   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'FDG', opt.scanDate)
   logger.save_to_file()

rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  # main()


#!/opt/R/Rscript   --default-packages=utils,methods,base,stats,grDevices
# ==============================================================================
# PURPOSE:
#
usage_text <- 
"\nbeagle_pib_compute_ratios.Rscript [options] "
#
description_text <- 
"\n\n   The Purpose of this script is to perform PiB ratio volume generation 
for a given subject, when compared against a model mean and std dev voluume.
"
#
# ==============================================================================


# Set options
options(width=180)


# <Parsing>
#
# parse the input line to grab our options and arguments
suppressPackageStartupMessages(library("optparse"))
#
# set up a list of allowable options
option_list <- list(
   make_option(c("-v", "--verbose"), 
         action="store_true", 
         type="logical", default=FALSE, 
         help="Generate all sorts of messages [default is *not* verbose]"),
               
   make_option(c("-d", "--debug"), 
         action="store_true", 
         type="logical", default=FALSE, 
         help="Generate debug messages"),
               
   make_option(c("--keyname"), 
         action="store", 
         type="character", default=NULL, dest="keyname",
         help="Subject keyname (E.g. \"yueh\")"),
               
   make_option(c("--scanDate"), 
         action="store", 
         type="character", default=NULL, dest="scanDate",
         help="PiB scan Id for subject. (E.g. \"20071009\")"),

   make_option(c("--civetScanDate"), 
         action="store", 
         type="character", default=NULL, dest="civetScanDate",
         help="Civet scan Id for subject. (E.g. \"20071009\")"),
               
   make_option(c("--settingsFile"), 
         action="store", 
         type="character", default=NULL, dest="settingsFile",
         help="Fullpath to the aggregated settings file")
)

#
# ... create the parser, and then parse the command line
header_text <- paste(usage_text, description_text, sep="")
parser <- OptionParser(usage=header_text, option_list=option_list)
optX <- parse_args(parser, args=commandArgs(trailingOnly=TRUE), positional_arguments=TRUE)

# ... move options and args into separate, more convenient structures
opt <- optX$options

# check for the correct number of input volumes
if ( length(optX$args) > 0 ){
   stop("Extra positional arguments have been specified. Please stop that.")
}
#
# </Parsing>


#DEBUG ===========================================
#opt$ <- list()
#opt$verbose <- TRUE
#opt$debug <- TRUE
#opt$keyname <- "fenrir"
#opt$scanDate <- "20071009"
#opt$civetScanDate <- "20071009"
#opt$settingsFile <- "..."
#
log_file <- "loggingBySGE"
#DEBUG ===========================================


# if the log is being written to SGE, then don't log internally
if ( log_file != "loggingBySGE" ) {
   sink(log_file)
   options(echo=FALSE)
}


# = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
#

# load the HCLab beagle.statistics Analyis library
library(beagle.statistics)
#suppressPackageStartupMessages(library(beagle.statistics))  


# read the Loris aggregated settings file (in JSON format)
#cat(sprintf("BEFORE settings load\n"))
settings <- read_beagle_aggregated_settings(opt$settingsFile, verbose=TRUE)
#cat(sprintf("AFTER settings load\n"))


# set some useful constants
CIVET_VERSION <- settings$CIVET_VERSION

# define some useful subdirectories
LORIS_ROOT_DIR <- settings$LORIS_ROOT_DIR
keyname_dir_fullPath <- file.path(LORIS_ROOT_DIR, opt$keyname)

# PiB-related paths
pibWorkingDir <- paste("PiB", opt$scanDate, sep="-")
pibDir <- file.path(keyname_dir_fullPath, pibWorkingDir)
pibDir_ratiosDir <- file.path(pibDir, "ratios")
pibDir_logsDir <- file.path(pibDir, "logs")
pibDir_imagesDir <- file.path(pibDir, "images")
pibDir_masksDir <- file.path(pibDir, "masks")
pibDir_talDir <- file.path(pibDir, "tal")


# set reference tissue-related values. First, parse the multi-entry input lines into character arrays
PIB_REF_TISSUE_IDENTIFIERS <- unlist(strsplit(settings$PIB_REF_TISSUE_IDENTIFIERS,','))
PIB_REF_TISSUE_DESCRIPTIONS <- unlist(strsplit(settings$PIB_REF_TISSUE_DESCRIPTIONS,','))
PIB_REF_MASK_CLIPPED_BY_MEAN_ACTIVITY_VOLSUFFIX <- unlist(strsplit(settings$PIB_REF_MASK_CLIPPED_BY_MEAN_ACTIVITY_VOLSUFFIX,','))
#
# create vector containing fullpaths to the reference tissue mask volumes
refCerebGM_filename <- file.path(pibDir_masksDir, paste(opt$keyname, PIB_REF_MASK_CLIPPED_BY_MEAN_ACTIVITY_VOLSUFFIX[1], sep=""))
refCorticalWM_filename <- file.path(pibDir_masksDir, paste(opt$keyname, PIB_REF_MASK_CLIPPED_BY_MEAN_ACTIVITY_VOLSUFFIX[2], sep=""))
refTissue_mask_volnames_fullpath <- c(refCerebGM_filename, refCorticalWM_filename)
#
# create vector of output ratio volume names
ratio_volume_names <- c(paste(opt$keyname, "_pibRatios_", PIB_REF_TISSUE_IDENTIFIERS[1], "_noMask.mnc", sep=""), 
                        paste(opt$keyname, "_pibRatios_", PIB_REF_TISSUE_IDENTIFIERS[2], "_noMask.mnc", sep=""))


# set working directory as the PiB subject root dir
wrkDir <- pibDir
setwd(wrkDir)



# Process subject
#
# note: most of the work is going to involve determining whether we have an
#       OLD protocol volume (34 frames), or a NEW protocol volume.
#
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


# load the HCLab beagle.statistics Analyis library
library(beagle.statistics)
#suppressPackageStartupMessages(library(beagle.statistics))  


# load subject's master logfile, and then write a start message
llogger <- beagle_logger_loadFromFile(opt$keyname, settings)
progname <- 'beagle_pib_compute_ratios.Rscript'
llogger <- beagle_logger_logStartMessage(progname, opt$keyname, 'PiB', opt$scanDate, llogger)
llogger <- beagle_logger_logMessage(progname, opt$keyname, 'PiB',
                                       opt$scanDate,
                                       'civet_version', CIVET_VERSION,
                                       llogger)

# set the status to "running"
if ( opt$verbose ) {
    cat(sprintf("Generating a PiB ratio volume for %s\n", paste(opt$keyname, opt$scanDate, sep="-")))
}
status_filename_running <- "beagle_pib_compute_ratios_JobStatus.running"
status_filename_running <- file.path(pibDir_logsDir, status_filename_running)
file.create(status_filename_running)


# we're going to pass a packet of args to the actual processing 
# function, so let's pass it as a list
packet <- list()
packet$keyname <- opt$keyname
#
# pass the actual 4D (filtered) PiB volume
filename <- paste(opt$keyname, settings$PIB_4d_VOLUME_SUFFIX, sep="")
packet$pib_4d_vol <- file.path(pibDir_talDir, filename)
if ( opt$debug ) {
    cat(sprintf("\n---------------\nDebug: packet\n---------------\n"))
    print(packet)
    cat(sprintf("<<<<<<<<<<<<<<<\n"))
}


# now we gotta decide between OLD/NEW protocol ...
#    to do this, we need to look at the number of frames in the PiB volume
#
# read in the volume header information
pib_header <- mincIO.readMincInfo(packet$pib_4d_vol)
if ( opt$debug ) {
    cat(sprintf("\n---------------\nDebug: pib_header\n---------------\n"))
    print(pib_header)
    cat(sprintf("<<<<<<<<<<<<<<<\n"))
}


# case: NEW protocol
#
# if we have 7 frames, then this subject was scanned using the NEW 
# protocol, and thus all frames are to be used in computing the ratios
# note: although we only have 7 frames, total scanning time should equal 40 minutes 
if ( mincIO.getProperty(pib_header, "nFrames") == 7 ) {
   frameDuration <- round(sum(mincIO.getProperty(pib_header, "timeWidths"))/60)
   if ( frameDuration != 40 ) {
      errmsg <- sprintf("Problem encountered with 4D PiB volume ...\n")
      errmsg <- paste(errmsg, sprintf("file: %s\n", packet$pib_4d_vol), collapse="")
      errmsg <- paste(errmsg, sprintf("Number of frames in volume: %d\n", mincIO.getProperty(pib_header, "nFrames")), collapse="")
      errmsg <- paste(errmsg, sprintf("Expected scan duration: 40 minutes\n"), collapse="")
      errmsg <- paste(errmsg, sprintf("Actual scan duration: %d minutes\n", frameDuration), collapse="")
      warning(errmsg)
   }
   packet$frameStart <- 1
   packet$frameStop <- mincIO.getProperty(pib_header, "nFrames")
   packet$nFramesToProcess <-  packet$frameStop - packet$frameStart +1
}


# case: OLD protocol
#
#    note 1: Only the last 5 frames are to be used in computing the ratios
#    note 2: The last 5 frames of the OLD protocol should still yield
#            40 minutes of scanning time
if ( mincIO.getProperty(pib_header, "nFrames") == 34 ) {
   frameDuration <- round(sum(mincIO.getProperty(pib_header, "timeWidths")[30:34])/60)
   if ( frameDuration != 40 ) {
      errmsg <- sprintf("Problem encountered with 4D PiB volume ...\n")
      errmsg <- paste(errmsg, sprintf("file: %s\n", packet$pib_4d_vol), collapse="")
      errmsg <- paste(errmsg, sprintf("Number of frames in volume: %d\n", mincIO.getProperty(pib_header, "nFrames")), collapse="")
      errmsg <- paste(errmsg, sprintf("Expected scan duration: 40 minutes\n"), collapse="")
      errmsg <- paste(errmsg, sprintf("Actual scan duration: %d minutes\n", frameDuration), collapse="")
      warning(errmsg)
   }
   packet$frameStart <- 30
   packet$frameStop <- mincIO.getProperty(pib_header, "nFrames")
   packet$nFramesToProcess <-  packet$frameStop - packet$frameStart +1
}

# might we have an invalid number of frames? (i.e., not 7 or 34?)
# ... previously, we would have terminated for this condition, however, HC still
# ... wants to see these results because:
# ... (1) if no PiB, then cannot conclude anything
# ... (2) if significant PiB, then we have PiB, since lack of frames will likely serve to *reduce*
# ...     sensitivity. So if we can see it with fewer frames, then it's real.
# ... STILL - put out a super salient warning ...  and then process all scans
if ( mincIO.getProperty(pib_header, "nFrames") != 34 && mincIO.getProperty(pib_header, "nFrames") != 7 ) {
   status_filename_warning <- "beagle_pib_compute_ratios.warning"
   status_filename_warning <- file.path(pibDir_logsDir, status_filename_warning)
   file.create(status_filename_warning)
   cat("\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
   cat(sprintf("Number of frames in volume (n=%d) is invalid\n", mincIO.getProperty(pib_header, "nFrames")))
   cat(sprintf("PiB volume: %s\n", packet$pib_4d_vol))
   cat("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n")
   # set to process full range of frames
   packet$frameStart <- 1
   packet$frameStop <- mincIO.getProperty(pib_header, "nFrames")
   packet$nFramesToProcess <-  packet$frameStop - packet$frameStart +1
}


# compute Area Under the Curve (AUC) at each voxel for the 4D PiB volume
#
# do the magic, then write out the AUC volume
if ( opt$debug ) {
    cat(sprintf("\n---------------\nDebug: packet\n---------------\n"))
    print(packet)
    cat(sprintf("<<<<<<<<<<<<<<<\n"))
}
pibAucVol <- compute_dynamic_volume_auc(packet, opt)
filename <- file.path(pibDir_ratiosDir, paste(opt$keyname, settings$PIB_AUC_VOLUME_FILENAME_SUFFIX, sep=""))
mincIO.writeVolume(pibAucVol, filename, clobber=TRUE)



# OK, we've now computed the AUC values for the actual 4D PiB volume.
# Now we need to calculate the AUC for each reference tissue, since the
# reference tissue AUC is used as the demoninator when computing the PiB ratios.
#
# set a few additional packet settings
packet$pibAucPlotSubtitle <- paste(opt$keyname, opt$scanDate, sep="-")

# loop over all reference tissues
#  ... compute AUC, ratios, and some lovely plots
for ( ndx in 1:length(PIB_REF_TISSUE_IDENTIFIERS)) {
   if ( opt$verbose ) {
      cat("\n\n======================================================================\n")
      cat(sprintf("==> Processing reference tisse: %s (%s)\n", PIB_REF_TISSUE_DESCRIPTIONS[ndx], PIB_REF_TISSUE_IDENTIFIERS[ndx]))
      cat("----------------------------------------------------------------------\n\n")
   }

   # set the ref tissue mask volume name
   packet$refTissue_volname_fullPath <- refTissue_mask_volnames_fullpath[ndx]
   if ( opt$debug ) {
      cat(sprintf("\n---------------\nDebug: packet\n---------------\n"))
      print(packet)
      cat(sprintf("<<<<<<<<<<<<<<<\n"))
   }
   refAuc.lst <- compute_ref_tissue_auc(packet, opt)

   # divide each voxel's integral by that of the reference, then write out the ratio volume
   pibRatioVol <- pibAucVol / refAuc.lst$refAuc
   filename <- file.path(pibDir_ratiosDir, ratio_volume_names[ndx])
   mincIO.writeVolume(pibRatioVol, filename, clobber=TRUE)
   
   # write out plots
   #
   # the return list contains a trellis plot - print it (vector and raster formats)
   fileOut <- file.path(pibDir_imagesDir, paste(opt$keyname, "_", PIB_REF_TISSUE_IDENTIFIERS[ndx],"_AUCplot.pdf", sep=""))
   trellis.device(device="pdf", file=fileOut, width=6, height=4, paper="letter")
   print(refAuc.lst$refAUCplot)
   dev.off()
   #
   fileOut <- file.path(pibDir_imagesDir, paste(opt$keyname, "_", PIB_REF_TISSUE_IDENTIFIERS[ndx],"_AUCplot.png", sep=""))
   trellis.device(device="png", file=fileOut, width=6, height=4, units="in", res=600)
   print(refAuc.lst$refAUCplot)
   dev.off()
   
   # write selected values to the logfile
   llogger <- beagle_logger_logMessage(progname, opt$keyname, 'PiB', opt$scanDate, 
                                          paste(PIB_REF_TISSUE_IDENTIFIERS[ndx],'avg_refValues_byFrame', sep='_'), 
                                          refAuc.lst$avg_refValues_byFrame.v,
                                          llogger)
                                             
   llogger <- beagle_logger_logMessage(progname, opt$keyname, 'PiB', opt$scanDate, 
                                             paste(PIB_REF_TISSUE_IDENTIFIERS[ndx],'mid_frame_times', sep='_'),
                                             refAuc.lst$mid_frame_times.v,
                                             llogger)
                                             
   llogger <- beagle_logger_logMessage(progname, opt$keyname, 'PiB', opt$scanDate, 
                                             paste(PIB_REF_TISSUE_IDENTIFIERS[ndx],'AUC', sep='_'),
                                             refAuc.lst$refAuc,
                                             llogger)

   if ( opt$verbose ) {
      cat("-------------------------------------------------------------------\n")
      cat(sprintf("Processing complete for reference tisse: %s (%s)\n", PIB_REF_TISSUE_DESCRIPTIONS[ndx], PIB_REF_TISSUE_IDENTIFIERS[ndx]))
      cat("----------------------------------------------------------------------\n\n\n")
   }
} # end of reference tissue loop



# close log file
if ( log_file != "loggingBySGE" ) {
   sink()
}

# set the status to "finished"
status_filename_finished <- "beagle_pib_compute_ratios_JobStatus.finished"
status_filename_finished <- file.path(pibDir_logsDir, status_filename_finished)
file.rename(status_filename_running, status_filename_finished)


# log a 'done' message to the subject's master logfile, and then write out logfile
llogger <- beagle_logger_logStopMessage(progname, opt$keyname, 'PiB', opt$scanDate, llogger)
beagle_logger_saveToFile(opt$keyname, llogger, settings)


# print the log entries (for fun)
logger.df <- beagle_logger_loadFromFileAsDataFrame(opt$keyname, settings)
options(width=9999)
print(logger.df)

q(save="no")


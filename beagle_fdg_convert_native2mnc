#!/usr/bin/env ruby
# ==============================================================================
# Purpose:
#     Convert native FDG volumes into minc and then anonymize them,
#     substituting the real subject name with the keyname.
#
# ==============================================================================

require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_logger_classes'


# start of main script
begin
   opt                     = OpenStruct.new{}  # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.fake                = false
   opt.clobber             = false
   opt.ecat                = false
   opt.dicom               = false
   opt.minc                = false
   #
   opt.keyname             = ""
   opt.target              = ""                 # input dicom dirname or ecat filename
   opt.scanDate            = ""
   opt.scanId              = ""                 # this is a derived value
   opt.civetScanId         = ""
   opt.settingsFile        = ""



   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "\nUsage:beagle_fdg_convert_native2mnc [Options]"

      opts.separator ""
      opts.separator "Options:"

      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }

      opts.on('--clobber', 'Overwrite existing output file') { |c| opt.clobber = c }

      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }

      opts.on('-f', '--fake', 'Do not actually execute the commands') { |f| opt.fake = f }

      opts.on('--dicom', 'Input is in Dicom format') { |dcm| opt.dicom = dcm }

      opts.on('--ecat', 'Input is in Ecat format') { |ecat| opt.ecat = ecat }

      opts.on('--minc', 'Input is in Minc format') { |minc| opt.minc = minc }

      opts.on('--keyname keyname', 'Subject keyname') do |key|
      opt.keyname = key.to_s
         puts "** keyname: " + opt.keyname if opt.debug
      end
      
      opts.on('--scanDate scan_date', "Format YYYYMMDD") do |scanDate|
         opt.scanDate = scanDate
         puts "** scan date: " + opt.scanDate if opt.verbose
      end

      opts.on('--civetScanId civet_scan_id', "Format keyname-scanDate") do |civetScanId|
         opt.civetScanId = civetScanId
         puts "** Civet scan Id: " + opt.civetScanId if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end

      opts.on('--inputTarget input_dicomDir_or_ecatFilename', 'Input target ') do |target|
         opt.target = target.to_s
         puts "** input target name: " + opt.target if opt.debug
      end

      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end

   end  # OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   begin
      opts.parse!(ARGV)
   rescue Exception => e
      puts e, "", opts
      exit
   end



   # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
   #

   # check for aggregated settings file, then read if all looks OK
   if ( opt.settingsFile.empty? ) then
      puts "\n*** Error: Missing option(s) -- Loris aggregated settings file"
      puts opts
      exit
   end
   #
   if ( !File.exists?(opt.settingsFile) || !File.file?(opt.settingsFile) ) then
      puts sprintf("\n!!! Error: The specified Loris aggregated settings [%s] does not exist or is unreadable.", opt.settingsFile)
      exit
   end
   #
   settings = load_beagle_aggregated_settings(opt.settingsFile, verbose=false, debug=false)


   # init associated variables
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']
   CIVET_ROOT_DIR = settings['CIVET_ROOT_DIR']


   # set some useful values
   opt.scanId = opt.keyname + '-' + opt.scanDate
   keyname_dir_fullPath = File.join(settings['LORIS_ROOT_DIR'], opt.keyname)
   #
   fdg_dir = 'FDG-' + opt.scanDate
   fdg_dir_fullPath = File.join(keyname_dir_fullPath, fdg_dir)
   fdgTmp_dir_fullPath = File.join(fdg_dir_fullPath, 'tmp')
   fdgLogs_dir_fullPath = File.join(fdg_dir_fullPath, 'logs')
   fdgNative_dir_fullPath = File.join(fdg_dir_fullPath, 'native')



   # * * * * *  START of input argument validation   * * * * *
   #
   # keyname has been entered?
   if ( opt.keyname.empty? or opt.scanDate.empty? ) then
      puts "\n*** Error: Subject keyname OR PiB scan date is missing"
      puts opts
      exit
   end

   # we first need to determine the nature of the input? (ECAT or DICOM)
   if ( !opt.ecat and !opt.dicom  and !opt.minc ) then
      puts "\n!!! Please specify an input file type (--ecat or --dicom or --minc)"
      puts opts
      puts "\n\n"
      exit
   end

   # validate input parameters
   # ... we need a target specified
   if (opt.target.empty?) then
      puts "\n!!! Please specify either an input Dicom directory or an Ecat filename as target"
      puts opts
      puts "\n\n"
      exit
   end

   # validate input arg as DICOM (if appropriate) 
   if ( opt.dicom ) then
   # make sure the directory exists
      inDir = opt.target
      if ( !File.directory?(inDir) ) then
         puts "!! I can't find the Dicom input directory   #{inDir}"
         puts "!! ... Stopping now. \n"
         puts opts
         puts "\n\n"
         exit
      end
      inDir = File.expand_path(inDir)
   
      # make sure that we have some dicom files in that directory
      # ... note: assume that the Dicom dir contains ONLY the FDG volume, thus we can "*.dcm"
      dicom_files_glob = File.join(inDir, '*.dcm')
      puts dicom_files_glob if opt.debug
      dicom_filenames = Dir.glob(dicom_files_glob)
      puts dicom_filenames if opt.debug
      #
      if ( dicom_filenames.length < 2 ) then
         puts "!! Ummm ... I'm expecting to see a bunch of dicom files in #{inDir}, but I'm not."
         puts "!! ... Really.  Take a look for yourself.  Files should end with '.dcm'\n"
         puts opts
         puts "\n\n"
         exit
      end
   end


   # validate input arg as ECAT (if appropriate) 
   if ( opt.ecat or opt.minc ) then
      # make sure the directory and file exists
      if ( !File.exists?(opt.target) ) then
         puts "!! I can't find the specified input Ecat/Minc file: #{opt.target}"
         puts "!! ... Stopping now. \n"
         puts opts
         puts "\n\n"
         exit
      end

      # OK, the file is there. Let's set some useful variables
      inDir = File.expand_path(File.dirname(opt.target))
      native_scan_filename = File.basename(opt.target)
   end


   # make sure that the output directory exists
   puts "FDG output directory is: #{fdg_dir_fullPath}" if opt.debug
   if ( !File.exists?(fdg_dir_fullPath) or !File.directory?(fdg_dir_fullPath) ) then
      puts "\n!!! Please specify a valid and writeable output directory"
      puts opts
      puts "\n\n"
      exit
   end


   # print out a handy summary of the validated script args
   if (opt.verbose) then
      puts "\n\n"
      puts "  -------------------------------------------------------------------------" 
      if ( opt.dicom ) then puts "    Processing Dicom directory: #{inDir}" end
      if ( opt.ecat ) then puts "    Processing Ecat file: #{native_scan_filename}" end
      if ( opt.minc ) then puts "    Processing Minc file: #{native_scan_filename}" end
      puts "  -------------------------------------------------------------------------" 

      puts "\nProcessing Options:"
      puts "   **                         Verbose:    ON" if opt.verbose
      puts "   **                           Debug:    ON" if opt.debug
      puts "   **                            Fake:    ON" if opt.fake
      puts "   **                         Clobber:    ON" if opt.clobber
      puts "   **                         keyname:    #{opt.keyname}"
      puts "   **                       input dir:    #{inDir}"
      if ( opt.ecat ) then
         puts "   **                       ecat file:    #{native_scan_filename}"
      end
      if ( opt.minc ) then
         puts "   **                       minc file:    #{native_scan_filename}"
      end
      if ( opt.dicom ) then
         puts "   **     Number of dicom files found:    #{dicom_filenames.length}"
      end
      puts "   **                       output dir:    #{fdg_dir_fullPath}"
      puts "\n\n"
   end
   #
   # * * * * *  END of input argument validation   * * * * * * * *
   # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 



   # load subject's master logfile; write a start message
   progname = 'beagle_fdg_convert_native2mnc'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'FDG', opt.scanDate)
   logger.log_message(progname, opt.keyname, 'FDG', opt.scanDate, 'civet_version', CIVET_VERSION)


   # now that we've verified that we have a /logs subdir,
   # ... set processing status to "running"
   set_job_status(fdgLogs_dir_fullPath, "beagle_fdg_convert_native2mnc_JobStatus", "running")



   # turn off minc2 for now (we've had problems with ecat2mnc and minc2)
   ENV['MINC_FORCE_V2'] = '0'



   # if minc volume input, just copy -- no conversion needed
   if ( opt.minc ) then
      puts "\n** copying minc volume (#{native_scan_filename}) ..."  if opt.verbose
      FileUtils.cp(opt.target, "#{fdgNative_dir_fullPath}/#{opt.keyname}_converted1.mnc") if not opt.fake
   end


   # convert ecat volume to minc
   if ( opt.ecat ) then
      puts "\n** converting ecat volume (#{native_scan_filename}) to minc ..."  if opt.verbose
      clobber_switch = opt.clobber ? "-clobber" : " "
      cmd = "ecattominc -verbose #{clobber_switch}  -short -small_header -nodecay_correct  "
      cmd << "#{opt.target}  "
      cmd << "#{fdgNative_dir_fullPath}/#{opt.keyname}_converted1.mnc"
      do_cmd(cmd, opt.verbose, opt.fake)
   end


   # convert dicom directory to minc
   if ( opt.dicom ) then
      puts "\n** converting dicom files from directory (#{inDir}) to minc ..."  if opt.verbose
      clobber_switch = opt.clobber ? "-clobber" : " "
      cmd = "dcm2mnc -verbose #{clobber_switch}   "
      cmd << "-fname #{opt.keyname}_converted0 "
      cmd << "-dname . "
      cmd << "#{inDir}/*.dcm "
      cmd << "#{fdgNative_dir_fullPath}"
      do_cmd(cmd, opt.verbose, opt.fake)
      
      # change voxel type to "short int"
      # ... dcm2mnc converts to "byte" and provides no switch to do otherwise
      puts "\n** converting voxel type to *short int* ..."  if opt.verbose
      clobber_switch = opt.clobber ? "-clobber" : " "
      cmd = "mincreshape  -verbose #{clobber_switch} -short  "
      cmd << "#{fdgNative_dir_fullPath}/#{opt.keyname}_converted0.mnc  "
      cmd << "#{fdgNative_dir_fullPath}/#{opt.keyname}_converted1.mnc  "
      do_cmd(cmd, opt.verbose, opt.fake)
   end


   # deIdentify the volume
   puts "\n** deIdentifying the minc volume ..."  if opt.verbose
   cmd = "mincDeIdentify  -v  --clobber "
   cmd << "--name #{opt.keyname}  "
   cmd << "#{fdgNative_dir_fullPath}/#{opt.keyname}_converted1.mnc  "
   cmd << "#{fdgNative_dir_fullPath}/#{opt.keyname}.mnc  "
   do_cmd(cmd, opt.verbose, opt.fake)

   # clean up non-deIdentified files
   FileUtils.rm_f("#{fdgNative_dir_fullPath}/#{opt.keyname}_converted0.mnc") if not opt.fake
   FileUtils.rm_f("#{fdgNative_dir_fullPath}/#{opt.keyname}_converted1.mnc") if not opt.fake


   # Done. Turn minc2 back on before finsihing.
   ENV['MINC_FORCE_V2'] = '1'

   # set job status to "finished"
   set_job_status(fdgLogs_dir_fullPath, "beagle_fdg_convert_native2mnc_JobStatus", "finished")

   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'FDG', opt.scanDate)
   logger.save_to_file()

rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  #main()






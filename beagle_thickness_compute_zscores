#!/usr/bin/env ruby
# ==============================================================================
# PURPOSE:
#    This script is supposed to be executed by it's driver, to compute
#    cortical thickness zscores and write the results out to a
#    vector file.
# ==============================================================================

require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_logger_classes'

# start of main script
begin
   opt                     = OpenStruct.new{}  # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.fake                = false
   #
   opt.keyname             = ""
   opt.scanDate            = ""
   opt.scanId              = ""
   opt.settingsFile        = ""
   #
   opt.lhThicknessVectorFile     = ""           # Civet input -- LH thickness values file - fullpath
   opt.rhThicknessVectorFile     = ""           # Civet input -- RH thickness values file - fullpath


   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [Options]"
      opts.separator ""
      opts.separator "Options:"

      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }

      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }

      opts.on('-f', '--fake', 'Do not actually execute the commands') { |f| opt.fake = f }

      opts.on('--keyname subject_keyname', "subject keyname (e.g., trinity)") do |keyname|
         opt.keyname = keyname.to_s
         puts "** subject keyname: " + opt.keyname if opt.verbose
      end

      opts.on('--scanDate scan_date', "Format YYYYMMDD") do |scanDate|
         opt.scanDate = scanDate
         puts "** scan date: " + opt.scanDate if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end

      opts.on('--lhThicknessVectorFile lh_thickness_file', "Subjects LH thickness file (fullpath)") do |lhThicknessVectorFile|
         opt.lhThicknessVectorFile = lhThicknessVectorFile
         puts "** Subjects LH thickness vector file (fullpath): " + opt.lhThicknessVectorFile if opt.verbose
      end
      
      opts.on('--rhThicknessVectorFile rh_thickness_file', "Subjects RH thickness file (fullpath)") do |rhThicknessVectorFile|
         opt.rhThicknessVectorFile = rhThicknessVectorFile
         puts "** Subjects RH thickness vector file (fullpath): " + opt.rhThicknessVectorFile if opt.verbose
      end

      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end

   end  #OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   opts.parse!(ARGV)



   # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
   #

   # check for aggregated settings file, then read if all looks OK
   if ( opt.settingsFile.empty? ) then
      puts "\n*** Error: Missing option(s) -- Loris aggregated settings file"
      puts opts
      exit
   end
   #
   if ( !File.exists?(opt.settingsFile) || !File.file?(opt.settingsFile) ) then
      puts sprintf("\n!!! Error: The specified Loris aggregated settings [%s] does not exist or is unreadable.", opt.settingsFile)
      exit
   end
   #
   settings = load_beagle_aggregated_settings(opt.settingsFile, verbose=false, debug=false)


   # init selected variables
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']
   CIVET_ROOT_DIR = settings['CIVET_ROOT_DIR']
   CIVET_PREFIX = settings['CIVET_PREFIX'] + '_'

   # Elderly model-specific cortical thickness info
   ELDERLY_MODEL_DIR = settings['ELDERLY_MODEL_DIR']
   ELDERLY_MODEL_NATIVE_MEAN_THICKNESS_FILE = settings['ELDERLY_MODEL_NATIVE_MEAN_THICKNESS_FILE']
   ELDERLY_MODEL_NATIVE_MEAN_THICKNESS_FILE_FULLPATH = File.join(ELDERLY_MODEL_DIR, ELDERLY_MODEL_NATIVE_MEAN_THICKNESS_FILE)
   ELDERLY_MODEL_NATIVE_STDEV_THICKNESS_FILE = settings['ELDERLY_MODEL_NATIVE_STDEV_THICKNESS_FILE']
   ELDERLY_MODEL_NATIVE_STDEV_THICKNESS_FILE_FULLPATH = File.join(ELDERLY_MODEL_DIR, ELDERLY_MODEL_NATIVE_STDEV_THICKNESS_FILE)

   # set some useful values/directories
   opt.scanId = opt.keyname + '-' + opt.scanDate
   keyname_dir_fullPath = File.join(settings['LORIS_ROOT_DIR'], opt.keyname)
   
   cta_dir = 'THICKNESS-' + opt.scanDate
   cta_dir_fullPath = File.join(keyname_dir_fullPath, cta_dir)
   ctaLogs_dir_fullPath = File.join(cta_dir_fullPath, 'logs')



   # * * * * *   Start of input argument validation   * * * * *

   # keyname has been entered?
   if ( opt.keyname.empty? or opt.scanDate.empty? ) then
      puts "\n*** Error: Subject keyname or civet scan date is missing (or both)"
      puts opts
      exit
   end

   # ... now check the thickness directory 
   if ( !File.exists?(cta_dir_fullPath) || !File.directory?(cta_dir_fullPath) ) then
      puts sprintf("\n*** Error: The cortical thickness output root directory [%s] is not valid", cta_dir_fullPath)
      puts opts
      exit
   end

   # * * * * *   End of input argument validation   * * * * *


   # load subject's master logfile; write a start message
   progname = 'beagle_thickness_compute_zscores'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'THICKNESS', opt.scanDate)
   logger.log_message(progname, opt.keyname, 'THICKNESS', opt.scanDate, 'civet_version', CIVET_VERSION)

   # set job status to "running"
   set_job_status(ctaLogs_dir_fullPath, "beagle_thickness_compute_zscores_JobStatus", "running")


   #
   # compute the z-scores
   #
   # ... concatenate left and right thickness values into one vector
   # ... file and then write it into thickness dir
   aggregate_vector_filename = opt.keyname + "_thickness_lhrh.txt" 
   aggregate_vector_filename_fullpath = File.join(cta_dir_fullPath, aggregate_vector_filename)
   cmd = "cat "
   cmd << "#{opt.lhThicknessVectorFile}  "
   cmd << "#{opt.rhThicknessVectorFile}  "
   cmd << "> #{aggregate_vector_filename_fullpath}  "
   do_cmd(cmd, opt.verbose, opt.fake)


   # ... compute the actual z-scores in 2 steps, using vertstats_math from the
   # ... oobicpl package
   # ... (1) subtract model mean from individual
   ctaTmp_dir_fullPath = File.join(cta_dir_fullPath, "tmp")
   thickness_delta_filename = opt.keyname + "_thickness_delta.txt"
   thickness_delta_filename_fullpath = File.join(ctaTmp_dir_fullPath, thickness_delta_filename)
   cmd = "vertstats_math -sub "
   cmd << "#{aggregate_vector_filename_fullpath}    "
   cmd << "#{ELDERLY_MODEL_NATIVE_MEAN_THICKNESS_FILE_FULLPATH}  "
   cmd << "#{thickness_delta_filename_fullpath}  "
   do_cmd(cmd, opt.verbose, opt.fake)

   # ... (2) divide model stddev into the thickness delta values
   cmd = "vertstats_math -div  -old_style_file  "
   cmd << "#{thickness_delta_filename_fullpath}    "
   cmd << "#{ELDERLY_MODEL_NATIVE_STDEV_THICKNESS_FILE_FULLPATH}  "
   cmd << "#{cta_dir_fullPath}/#{opt.keyname}_thickness_zscores.txt  "
   do_cmd(cmd, opt.verbose, opt.fake)

   # set job status to done
   set_job_status(ctaLogs_dir_fullPath, "beagle_thickness_compute_zscores_JobStatus", "finished")

   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'THICKNESS', opt.scanDate)
   logger.save_to_file()

rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  #main()


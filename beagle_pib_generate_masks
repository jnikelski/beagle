#!/usr/bin/env ruby
# ==============================================================================
# Purpose:
#     Generate reference tissue masks for assorted reference tissues.
#     (1) cerebellar gray
#     (2) whole-brain white matter (ToDo)
#
#
#
# ==============================================================================



require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'
require 'tmpdir'            # needed for Dir::tmpdir

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_logger_classes'

# start of main script
begin
   opt                     = OpenStruct.new{}  # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.fake                = false
   opt.keyname             = ""
   opt.scanId              = ""
   opt.civetScanId         = ""
   opt.settingsFile        = ""

   
   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [Options]"
      opts.separator ""
      opts.separator "Options:"
   
      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }
   
      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }
   
      opts.on('-f', '--fake', 'Do not actually execute the commands') { |f| opt.fake = f }
   
      opts.on('--keyname subject_keyname', "Anonymizing keyname for this subject") do |keyname|
         opt.keyname = keyname
         puts "** keyname: " + opt.keyname if opt.verbose
      end
      
      opts.on('--scanId pib_scan_id', "Usually a scan date of format YYYYMMDD") do |scanId|
         opt.scanId = scanId
         puts "** scan date: " + opt.scanId if opt.verbose
      end
      
      opts.on('--civetScanId scan_date', "Usually a scan date of format YYYYMMDD") do |civetScanId|
         opt.civetScanId = civetScanId
         puts "** Civet scan date: " + opt.civetScanId if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end
   
      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end
   
   end  # OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   opts.parse!(ARGV)



   # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
   #

   # check for aggregated settings file, then read if all looks OK
   if ( opt.settingsFile.empty? ) then
      puts "\n*** Error: Missing option(s) -- Loris aggregated settings file"
      puts opts
      exit
   end
   #
   if ( !File.exists?(opt.settingsFile) || !File.file?(opt.settingsFile) ) then
      puts sprintf("\n!!! Error: The specified Loris aggregated settings [%s] does not exist or is unreadable.", opt.settingsFile)
      exit
   end
   #
   settings = load_beagle_aggregated_settings(opt.settingsFile, verbose=false, debug=false)

   # init associated variables
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']
   CIVET_ROOT_DIR = settings['CIVET_ROOT_DIR']
   CIVET_PREFIX = settings['CIVET_PREFIX'] + '_'
   
   PIB_CEREB_THOLD_PCT = settings['PIB_CEREB_THOLD_PCT']

   # set some useful values
   if ( settings['CIVET_SCANID_APPEND_SCANDATE_TO_KEYNAME'] == 'ON' ) then
      civetScan_dir = opt.keyname + '-' + opt.civetScanId
   else
      civetScan_dir = opt.keyname
   end
   keyname_dir_fullPath = File.join(settings['LORIS_ROOT_DIR'], opt.keyname)
   #
   pib_dir = 'PiB-' + opt.scanId
   pib_dir_fullPath = File.join(keyname_dir_fullPath, pib_dir)
   pibTmp_dir_fullPath = File.join(pib_dir_fullPath, 'tmp')
   pibLogs_dir_fullPath = File.join(pib_dir_fullPath, 'logs')
   pibNative_dir_fullPath = File.join(pib_dir_fullPath, 'native')
   pibTal_dir_fullPath = File.join(pib_dir_fullPath, 'tal')
   pibTransforms_dir_fullPath = File.join(pib_dir_fullPath, 'transforms')
   pibMasks_dir_fullPath = File.join(pib_dir_fullPath, 'masks')
   #
   masks_dir = 'MASKS-' + opt.civetScanId
   masks_dir_fullPath = File.join(keyname_dir_fullPath, masks_dir)



   # * * * * *  START of input argument validation   * * * * *
   #
   # keyname has been entered?
   if ( opt.keyname.empty? or opt.scanId.empty? ) then
      puts "\n*** Error: Subject keyname OR PiB scan date is missing"
      puts opts
      exit
   end

   # Civet scan date entered?
   if ( opt.civetScanId.empty? ) then
      puts "\n*** Error: Civet scan date is missing"
      puts opts
      exit
   end

   # check if the temporary working directory exists; if not, create it
   # Note: if often clear out the tmp dir at end of processing by 
   #       deleting it -- that's why we need to re-create it
   if !File.exists?(pibTmp_dir_fullPath) then Dir.mkdir(pibTmp_dir_fullPath) end
   #
   # * * * * *  END of input argument validation   * * * * * * * *
   # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


   # load subject's master logfile; write a start message
   progname = 'beagle_pib_generate_masks'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'PiB', opt.scanId)
   logger.log_message(progname, opt.keyname, 'PiB', opt.scanId, 'civet_version', CIVET_VERSION)

   # now that we've verified that we have a /logs subdir,
   # ... set processing status to "running"
   set_job_status(pibLogs_dir_fullPath, "beagle_pib_generate_masks_JobStatus", "running")

 

   # Reference Mask: Cerebellar Gray Matter
   #
   # 
   # the GM mask is generated by "beagle_masks_generate_from_labels_driver"
   CEREB_GM_MASK_VOLUME_FULLPATH = File.join(masks_dir_fullPath, 'cerebellum_mask_gm.mnc')

   # apply the gray matter mask against the mean dynamic volume
   mean_pibVolname = opt.keyname + "_mean_talAligned.mnc"
   mean_pibVolname_fullPath = File.join(pibTal_dir_fullPath, mean_pibVolname)
   #
   masked_mean_pibVolname = opt.keyname + "_masked_mean_pibVol.mnc"
   masked_mean_pibVolname_fullPath = File.join(pibTmp_dir_fullPath, masked_mean_pibVolname)
   #
   puts "\n** Apply cerebellar mask against mean dynamic volume ..."   if opt.verbose
   cmd = "mincmath -clobber -verbose -mult  "
   cmd << "#{CEREB_GM_MASK_VOLUME_FULLPATH}   "
   cmd << "#{mean_pibVolname_fullPath}  "
   cmd << "#{masked_mean_pibVolname_fullPath}    "
   do_cmd(cmd, opt.verbose, opt.fake)
   
   # segment the masked mean dynamic volume in order to remove
   # any masked voxels without any significant intensity values
   adjusted_cereb_gm_mask_volname = opt.keyname + "_cerebGMmask_maskedBy_meanPibActivity.mnc"
   adjusted_cereb_gm_mask_volname_fullPath = File.join(pibMasks_dir_fullPath, adjusted_cereb_gm_mask_volname)
   puts "\n** Segment the masked mean dynamic volume ..."   if opt.verbose
   #
   cmd = "mincmath -clobber -verbose -const2 -1 1 -nsegment  "
   cmd << "#{masked_mean_pibVolname_fullPath}   "
   cmd << "#{adjusted_cereb_gm_mask_volname_fullPath}  "
   do_cmd(cmd, opt.verbose, opt.fake)


   # set processing status to "finished"
   set_job_status(pibLogs_dir_fullPath, "beagle_pib_generate_masks_JobStatus", "finished")

   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'PiB', opt.scanId)
   logger.save_to_file()

rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  # main()


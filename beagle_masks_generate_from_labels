#!/usr/bin/env ruby
# ==============================================================================
# Purpose:
#     Use AAL labelled volume to create various masks.
#
#
#
#
#
# ==============================================================================


require 'optparse'
require 'ostruct'
require 'pathname'
require 'fileutils'
require 'tmpdir'            # needed for Dir::tmpdir

# load ruby gems
require 'rubygems'
require 'json'
require 'pp'

# load external dependencies
require 'hclab_function_library'
require 'beagle_function_library'
require 'beagle_logger_classes'
require 'beagle_civet_function_library'


# start of main script
begin
   opt                     = OpenStruct.new{}  # store input options
   opt.verbose             = false
   opt.debug               = false
   opt.fake                = false
   opt.keyname             = ""          # subject keyname
   opt.civetScanDate       = ""
   opt.aalVolname          = ""          # input subject's AAL labelled volume
   opt.logDir              = ""          # logfile/status directory
   opt.logfile             = ""          # logfile
   opt.tmpDir              = ""          # work directory
   opt.settingsFile        = ""

   # List of arguments.
   opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [Options] "
      opts.separator ""
      opts.separator "Options:"
   
      opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| opt.verbose = v }
   
      opts.on('-d', '--debug', 'Print pedantic debugging messages') { |d| opt.debug = d }
   
      opts.on('-f', '--fake', 'Do not actually execute the commands') { |f| opt.fake = f }
   
      opts.on('--keyname subject_keyname', "subject keyname") do |keyname|
         opt.keyname = keyname.to_s
         puts "** Subject keyname: " + opt.keyname if opt.verbose
      end
      
      opts.on('--civetScanDate civet_scan_date', "civet scan date (e.g., 20091118)") do |civetScanDate|
         opt.civetScanDate = civetScanDate.to_s
         puts "** civet scan date: " + opt.civetScanDate if opt.verbose
      end
         
      opts.on('--labelledAALvolume aal_label_volume', "subject's AAL labelled volume") do |aalVol|
         opt.aalVolname = aalVol.to_s
         puts "** Subject input AAL label volume: " + opt.aalVolname if opt.verbose
      end
      
      opts.on('--tmpDir tmpDir', "Temp work directory (default is system tmp dir)") do |x|
         opt.tmpDir = x.to_s
         puts "** tmpDir: " + opt.tmpDir if opt.verbose
      end
   
      opts.on('--logDir logfile_directory', "Logfile directory") do |lfD|
         opt.logDir = lfD.to_s
         puts "** logfile directory: " + opt.logDir if opt.verbose
      end

      opts.on('--settingsFile aggregated_settings_file', "Fullpath to the aggregated settings file ") do |settingsFile|
         opt.settingsFile = settingsFile.to_s
         puts "** Fullpath to the aggregated settings file: " + opt.settingsFile if opt.verbose
      end
   
      opts.on_tail("-h", "--help", "Show this very helpful help message") do
         puts opts
         exit
      end
   
   end  # OptionParser

   # run parse!() method in the OptionParser object, passing ARGV
   # NB: the "!" in parse!() removes the switches from ARGV
   puts "Before OptionParser start ..." if opt.debug
   opts.parse!(ARGV)



   # = = = = = = = =   M A I N   P R O C E S S I N G   S T A R T S   H E R E   = = = = = = =
   #

   # load and then initialize aggregated settings
   if ( opt.settingsFile.empty? ) then
      puts "\n*** Error: Fullpath to Beagle aggregated settings file must be specified"
      puts opts
      exit
   end
   settings = load_beagle_aggregated_settings(opt.settingsFile, verbose=true, debug=false)
   pp(settings) if opt.debug


   # init selected constants
   LORIS_ROOT_DIR = settings['LORIS_ROOT_DIR']
   CIVET_VERSION = settings['CIVET_VERSION']
   AAL_CEREBELLUM_LABEL_RANGE = settings['AAL_CEREBELLUM_LABEL_RANGE']
   #
   MASKS_AAL_CEREBELLUM_FILENAME = settings['MASKS_AAL_CEREBELLUM_FILENAME']
   MASKS_CEREBELLUM_GM_FILENAME = settings['MASKS_CEREBELLUM_GM_FILENAME']
   MASKS_CEREBELLUM_WM_FILENAME = settings['MASKS_CEREBELLUM_WM_FILENAME']
   MASKS_CEREBELLUM_GMWM_FILENAME = settings['MASKS_CEREBELLUM_GMWM_FILENAME']
   MASKS_WHOLEBRAIN_GM_FILENAME = settings['MASKS_WHOLEBRAIN_GM_FILENAME']
   MASKS_WHOLEBRAIN_WM_FILENAME = settings['MASKS_WHOLEBRAIN_WM_FILENAME']
   #
   tmp = settings['AAL_CEREBELLUM_LABEL_RANGE'].split(',')
   AAL_CEREBELLUM_LABEL_RANGE = [tmp[0].to_i, tmp[1].to_i]
   AAL_LABELLED_SUBJECT_VOLUME_SUFFIX = settings['AAL_LABELLED_SUBJECT_VOLUME_SUFFIX']


   # init selected variables
   keyname_dir_fullPath = File.join(LORIS_ROOT_DIR, opt.keyname)
   masks_dir = 'masks-' + opt.civetScanDate
   masks_dir_fullPath = File.join(keyname_dir_fullPath, masks_dir)
   masksLogs_dir_fullPath = File.join(masks_dir_fullPath, 'logs')



   # * * * * *  START of input argument validation   * * * * *
   #
   # keyname has been entered?
   if ( opt.keyname.empty? or opt.civetScanDate.empty? ) then
      puts "\n*** Error: Subject keyname OR civet scan date is missing"
      puts opts
      exit
   end
 
   # check if the temporary working directory exists; if not, create it
   if (opt.tmpDir.empty?) then
      opt.tmpDir = File.join(Dir::tmpdir, Process.pid.to_s)
   end
   if !File.exists?(opt.tmpDir) then Dir.mkdir(opt.tmpDir) end
   
   # ensure that the input volume has been specified
   if ( !File.exists?(opt.aalVolname) ) then
      puts "\n!!! Please specify the AAL-labelled input volume)"
      puts opts
      exit
   end

   #
   # * * * * *  END of input argument validation   * * * * * * * *
   # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
   


   # * * * * *   START of subject/scan-specific validation   * * * * *
   #
   # make sure that we have already created an AAL label volume for this subject
   filename = opt.keyname + AAL_LABELLED_SUBJECT_VOLUME_SUFFIX
   labels_dir = 'AAL-' + opt.civetScanDate
   filename_fullPath = File.join(keyname_dir_fullPath, labels_dir, filename)
   if !File.exists?( filename_fullPath ) then
      puts sprintf("\n!!! Error: Beagle-generated AAL label volume not found: %s", filename_fullPath)
      exit
   end
   #
   # * * * * *  END of subject/scan-specific validation   * * * * *
   # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 



   # load subject's master logfile; write a start message
   progname = 'beagle_masks_generate_from_labels'
   logger = BeagleLogger.new(opt.keyname, settings, eraseLog=false)
   logger.log_start_message(progname, opt.keyname, 'MASKS', opt.civetScanDate)
   logger.log_message(progname, opt.keyname, 'MASKS', opt.civetScanDate, 'civet_version', CIVET_VERSION)


   # good, now we can set a 'running' status in the logs subdir
   # NB: add "status" at the end of the script name to keep this
   #     file from clobbering the log file
   set_job_status(masksLogs_dir_fullPath, "beagle_masks_generate_from_labels_JobStatus", "running")


   # extract the left and right cerebellum from the AAL volume
   cmd = "mincmath -clobber -verbose "
   cmd << "-const2 #{AAL_CEREBELLUM_LABEL_RANGE[0]} #{AAL_CEREBELLUM_LABEL_RANGE[1]} "
   cmd << "-segment "
   cmd << "#{opt.aalVolname} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_AAL_CEREBELLUM_FILENAME} "
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)


   # apply the gray and white matter masks to the label volume mask
   # ... resulting in cerebellar gm/wm masks
   cmd = "mincmath -clobber -verbose -mult "
   cmd << "#{masks_dir_fullPath}/#{MASKS_AAL_CEREBELLUM_FILENAME} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_WHOLEBRAIN_GM_FILENAME} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_CEREBELLUM_GM_FILENAME} "
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)
   #
   cmd = "mincmath -clobber -verbose -mult "
   cmd << "#{masks_dir_fullPath}/#{MASKS_AAL_CEREBELLUM_FILENAME} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_WHOLEBRAIN_WM_FILENAME} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_CEREBELLUM_WM_FILENAME} "
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)

   # combine gm and wm masks to get a nice composite
   cmd = "mincmath -clobber -verbose -add "
   cmd << "#{masks_dir_fullPath}/#{MASKS_CEREBELLUM_GM_FILENAME} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_CEREBELLUM_WM_FILENAME} "
   cmd << "#{masks_dir_fullPath}/#{MASKS_CEREBELLUM_GMWM_FILENAME}"
   do_cmd(cmd, opt.verbose, opt.fake, opt.logfile)


   # set job status to done
   set_job_status(masksLogs_dir_fullPath, "beagle_masks_generate_from_labels_JobStatus", "finished")

   # log a 'done' message to the subject's master logfile, and then write out logfile
   logger.log_stop_message(progname, opt.keyname, 'MASKS', opt.civetScanDate)
   logger.save_to_file()


rescue RuntimeError => e
   STDERR.puts e
   exit 1
end  #main()

